syntax = "proto3";

package hyperlane.igp.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/strangelove-ventures/hyperlane-cosmos/x/igp/types";

// Hyperlane's gas oracle to configure exchange rates between origin and
// destination
message GasOracleConfig {
  option (gogoproto.goproto_getters) = false;

  // The IGP that this gas oracle config belongs to
  uint32 igp_id = 1;

  // The address that can update gas oracle configs for the remote domain
  string gas_oracle = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The domain that the gas oracle can update gas related information for
  uint32 remote_domain = 3;
}

// Hyperlane's gas oracle to configure exchange rates between origin and
// destination
message GasOracle {
  option (gogoproto.goproto_getters) = false;

  // Address of the oracle that can update this config
  string gas_oracle = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The domain of the message's destination chain
  uint32 remote_domain = 2;

  string token_exchange_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  string gas_price = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // gas overhead for the remote domain
  string gas_overhead = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}
