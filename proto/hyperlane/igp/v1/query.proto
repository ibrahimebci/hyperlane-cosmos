syntax = "proto3";

package hyperlane.igp.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/strangelove-ventures/hyperlane-cosmos/x/igp/types";

// Query service for hyperlane igp module
service Query {
  // Gets the beneficiary
  rpc GetBeneficiary(GetBeneficiaryRequest) returns (GetBeneficiaryResponse) {
    option (google.api.http).get = "/hyperlane/igp/v1/get_beneficiary";
  }
  // Quotes the amount of native tokens to pay for interchain gas.
  rpc QuoteGasPayment(QuoteGasPaymentRequest)
      returns (QuoteGasPaymentResponse) {
    option (google.api.http).get = "/hyperlane/igp/v1/quote_gas_payment";
  }
  // Gets the token exchange rate and gas price from the configured gas oracle
  // for a given destination domain.
  rpc GetExchangeRateAndGasPrice(GetExchangeRateAndGasPriceRequest)
      returns (GetExchangeRateAndGasPriceResponse) {
    option (google.api.http).get =
        "/hyperlane/igp/v1/get_exchange_rate_and_gas_price";
  }
}

// GetBeneficiaryRequest is the request type for the Query/Tree RPC method.
message GetBeneficiaryRequest {}

// GetBeneficiaryResponse is the response type for the Query/Tree RPC method.
message GetBeneficiaryResponse {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QuoteGasPaymentRequest is the request type for the Query/Tree RPC method.
message QuoteGasPaymentRequest {
  uint32 destination_domain = 1;
  string gas_amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QuoteGasPaymentResponse is the response type for the Query/Tree RPC method.
message QuoteGasPaymentResponse {
  cosmos.base.v1beta1.Coin price = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// GetExchangeRateAndGasPriceRequest is the request type for the Query/Tree RPC
// method.
message GetExchangeRateAndGasPriceRequest { uint32 destination_domain = 1; }

// GetExchangeRateAndGasPriceResponse is the response type for the Query/Tree
// RPC method.
message GetExchangeRateAndGasPriceResponse {
  string exchange_rate = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin price = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
