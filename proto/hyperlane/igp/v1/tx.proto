syntax = "proto3";

package hyperlane.igp.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "hyperlane/igp/v1/types.proto";

option go_package = "github.com/strangelove-ventures/hyperlane-cosmos/x/igp/types";

// Msg defines the hyperlane igp Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Create the IGP, optionally providing a beneficiary.
  rpc CreateIgp(MsgCreateIgp) returns (MsgCreateIgpResponse);

  // Deposits a payment for the relaying of a message to its destination chain.
  rpc PayForGas(MsgPayForGas) returns (MsgPayForGasResponse);

  // Transfers the entire native token balance to the beneficiary.
  // Deprecated, unneeded. TODO: delete this (keeping it for discussion at
  // present). rpc Claim(MsgClaim) returns (MsgClaimResponse);

  // Sets the gas oracles for remote domains specified in the config array.
  rpc SetGasOracles(MsgSetGasOracles) returns (MsgSetGasOraclesResponse);
  // Sets the beneficiary.
  rpc SetBeneficiary(MsgSetBeneficiary) returns (MsgSetBeneficiaryResponse);
  // Sets the overhead gas for the destination domain. This is in the
  // destination gas denom and will be added to the required payForGas payment.
  rpc SetDestinationGasOverhead(MsgSetDestinationGasOverhead)
      returns (MsgSetDestinationGasOverheadResponse);
}

// MsgPayForGas defines the request type for the Dispatch rpc.
message MsgPayForGas {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgPayForGas";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string message_id = 2;
  uint32 destination_domain = 3;
  string gas_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string refund_address = 5 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string relayer_address = 6 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.nullable) = true
  ];
}

// MsgPayForGasResponse defines the PayForGas response type.
message MsgPayForGasResponse {}

// MsgSetDestinationGasOverhead defines the overhead gas amount for the given
// destination.
message MsgSetDestinationGasOverhead {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgSetDestinationGasOverhead";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  uint32 destination_domain = 2;
  string gas_overhead = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];

  // Identifies the IGP the gas overhead configuration applies to
  uint32 igp_id = 4;
}

// MsgSetDestinationGasOverheadResponse defines the SetDestinationGasOverhead
// response type.
message MsgSetDestinationGasOverheadResponse {}

// MsgClaim defines the request type for the Claim rpc.
message MsgClaim {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgClaim";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgClaimResponse defines the Claim response type.
message MsgClaimResponse {}

// MsgSetGasOracles set the addresses allowed to define spot prices for relay
// fee payment.
message MsgSetGasOracles {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgSetGasOracles";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated GasOracleConfig configs = 2;
}

// MsgSetGasOraclesResponse defines the Claim response type.
message MsgSetGasOraclesResponse {}

// MsgSetBeneficiary defines the request type for the SetBeneficiary rpc.
message MsgSetBeneficiary {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgSetBeneficiary";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The IGP the beneficiary is being set for
  uint32 igp_id = 3;
}

// MsgSetBeneficiaryResponse defines the MsgSetBeneficiary response type.
message MsgSetBeneficiaryResponse {}

// MsgCreateIgp defines the request type to create a hyperlane IGP.
message MsgCreateIgp {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane-cosmos/MsgCreateIgp";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // If empty, the sender will be considered the beneficiary
  string beneficiary = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgCreateIgpResponse defines the MsgCreateIgp response type.
message MsgCreateIgpResponse {
  // The unique ID assigned to the newly created IGP
  uint32 igp_id = 1;
}