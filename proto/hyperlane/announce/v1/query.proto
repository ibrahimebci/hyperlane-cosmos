syntax = "proto3";

package hyperlane.announce.v1;

import "hyperlane/announce/v1/types.proto";
import "google/api/annotations.proto";

option go_package = "github.com/strangelove-ventures/hyperlane-cosmos/x/announce/types";

// Query service for hyperlane announce module
service Query {
  // Gets the announced storage locations (where signatures are stored) for the
  // requested validators
  rpc GetAnnouncedStorageLocations(GetAnnouncedStorageLocationsRequest)
      returns (GetAnnouncedStorageLocationsResponse) {
    option (google.api.http).get =
        "/hyperlane/announce/v1/get_announced_storage_locations";
  }

  // Gets a list of validators that have made announcements
  rpc GetAnnouncedValidators(GetAnnouncedValidatorsRequest)
      returns (GetAnnouncedValidatorsResponse) {
    option (google.api.http).get =
        "/hyperlane/announce/v1/get_announced_validators";
  }
}

// GetAnnouncedStorageLocationsRequest is the request type for the
// GetAnnouncedStorageLocations RPC method.
message GetAnnouncedStorageLocationsRequest {
  // list of validators where each validator is in hex-encoded eth address
  // format (20 bytes)
  repeated bytes validator = 1;
}

// GetAnnouncedStorageLocationsResponse is the response type for the
// GetAnnouncedStorageLocations RPC method.
message GetAnnouncedStorageLocationsResponse {
  repeated StorageMetadata metadata = 1;
}

// GetAnnouncedValidatorsRequest is the request type for the
// GetAnnouncedValidators RPC method.
message GetAnnouncedValidatorsRequest {}

// GetAnnouncedValidatorsResponse is the response type for the
// GetAnnouncedValidators RPC method.
message GetAnnouncedValidatorsResponse {
  // list of validators where each validator is in hex-encoded eth address
  // format (20 bytes)
  repeated string validator = 1;
}