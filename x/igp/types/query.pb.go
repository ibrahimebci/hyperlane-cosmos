// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/igp/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetBeneficiaryRequest is the request type for the Query/Tree RPC method.
type GetBeneficiaryRequest struct{}

func (m *GetBeneficiaryRequest) Reset()         { *m = GetBeneficiaryRequest{} }
func (m *GetBeneficiaryRequest) String() string { return proto.CompactTextString(m) }
func (*GetBeneficiaryRequest) ProtoMessage()    {}
func (*GetBeneficiaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{0}
}

func (m *GetBeneficiaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GetBeneficiaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBeneficiaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GetBeneficiaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBeneficiaryRequest.Merge(m, src)
}

func (m *GetBeneficiaryRequest) XXX_Size() int {
	return m.Size()
}

func (m *GetBeneficiaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBeneficiaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBeneficiaryRequest proto.InternalMessageInfo

// GetBeneficiaryResponse is the response type for the Query/Tree RPC method.
type GetBeneficiaryResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetBeneficiaryResponse) Reset()         { *m = GetBeneficiaryResponse{} }
func (m *GetBeneficiaryResponse) String() string { return proto.CompactTextString(m) }
func (*GetBeneficiaryResponse) ProtoMessage()    {}
func (*GetBeneficiaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{1}
}

func (m *GetBeneficiaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GetBeneficiaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBeneficiaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GetBeneficiaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBeneficiaryResponse.Merge(m, src)
}

func (m *GetBeneficiaryResponse) XXX_Size() int {
	return m.Size()
}

func (m *GetBeneficiaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBeneficiaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBeneficiaryResponse proto.InternalMessageInfo

func (m *GetBeneficiaryResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QuoteGasPaymentRequest is the request type for the Query/Tree RPC method.
type QuoteGasPaymentRequest struct {
	DestinationDomain uint32                                 `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	GasAmount         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=gas_amount,json=gasAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"gas_amount"`
}

func (m *QuoteGasPaymentRequest) Reset()         { *m = QuoteGasPaymentRequest{} }
func (m *QuoteGasPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QuoteGasPaymentRequest) ProtoMessage()    {}
func (*QuoteGasPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{2}
}

func (m *QuoteGasPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QuoteGasPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteGasPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QuoteGasPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteGasPaymentRequest.Merge(m, src)
}

func (m *QuoteGasPaymentRequest) XXX_Size() int {
	return m.Size()
}

func (m *QuoteGasPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteGasPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteGasPaymentRequest proto.InternalMessageInfo

func (m *QuoteGasPaymentRequest) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

// QuoteGasPaymentResponse is the response type for the Query/Tree RPC method.
type QuoteGasPaymentResponse struct {
	Price types.Coin `protobuf:"bytes,1,opt,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
}

func (m *QuoteGasPaymentResponse) Reset()         { *m = QuoteGasPaymentResponse{} }
func (m *QuoteGasPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QuoteGasPaymentResponse) ProtoMessage()    {}
func (*QuoteGasPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{3}
}

func (m *QuoteGasPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QuoteGasPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteGasPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QuoteGasPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteGasPaymentResponse.Merge(m, src)
}

func (m *QuoteGasPaymentResponse) XXX_Size() int {
	return m.Size()
}

func (m *QuoteGasPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteGasPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteGasPaymentResponse proto.InternalMessageInfo

func (m *QuoteGasPaymentResponse) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

// GetExchangeRateAndGasPriceRequest is the request type for the Query/Tree RPC
// method.
type GetExchangeRateAndGasPriceRequest struct {
	DestinationDomain uint32 `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
}

func (m *GetExchangeRateAndGasPriceRequest) Reset()         { *m = GetExchangeRateAndGasPriceRequest{} }
func (m *GetExchangeRateAndGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*GetExchangeRateAndGasPriceRequest) ProtoMessage()    {}
func (*GetExchangeRateAndGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{4}
}

func (m *GetExchangeRateAndGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GetExchangeRateAndGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExchangeRateAndGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GetExchangeRateAndGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExchangeRateAndGasPriceRequest.Merge(m, src)
}

func (m *GetExchangeRateAndGasPriceRequest) XXX_Size() int {
	return m.Size()
}

func (m *GetExchangeRateAndGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExchangeRateAndGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExchangeRateAndGasPriceRequest proto.InternalMessageInfo

func (m *GetExchangeRateAndGasPriceRequest) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

// GetExchangeRateAndGasPriceResponse is the response type for the Query/Tree
// RPC method.
type GetExchangeRateAndGasPriceResponse struct {
	ExchangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchange_rate"`
	Price        types.Coin                             `protobuf:"bytes,2,opt,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
}

func (m *GetExchangeRateAndGasPriceResponse) Reset()         { *m = GetExchangeRateAndGasPriceResponse{} }
func (m *GetExchangeRateAndGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*GetExchangeRateAndGasPriceResponse) ProtoMessage()    {}
func (*GetExchangeRateAndGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df73ac8b27e264f2, []int{5}
}

func (m *GetExchangeRateAndGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GetExchangeRateAndGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExchangeRateAndGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GetExchangeRateAndGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExchangeRateAndGasPriceResponse.Merge(m, src)
}

func (m *GetExchangeRateAndGasPriceResponse) XXX_Size() int {
	return m.Size()
}

func (m *GetExchangeRateAndGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExchangeRateAndGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExchangeRateAndGasPriceResponse proto.InternalMessageInfo

func (m *GetExchangeRateAndGasPriceResponse) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*GetBeneficiaryRequest)(nil), "hyperlane.igp.v1.GetBeneficiaryRequest")
	proto.RegisterType((*GetBeneficiaryResponse)(nil), "hyperlane.igp.v1.GetBeneficiaryResponse")
	proto.RegisterType((*QuoteGasPaymentRequest)(nil), "hyperlane.igp.v1.QuoteGasPaymentRequest")
	proto.RegisterType((*QuoteGasPaymentResponse)(nil), "hyperlane.igp.v1.QuoteGasPaymentResponse")
	proto.RegisterType((*GetExchangeRateAndGasPriceRequest)(nil), "hyperlane.igp.v1.GetExchangeRateAndGasPriceRequest")
	proto.RegisterType((*GetExchangeRateAndGasPriceResponse)(nil), "hyperlane.igp.v1.GetExchangeRateAndGasPriceResponse")
}

func init() { proto.RegisterFile("hyperlane/igp/v1/query.proto", fileDescriptor_df73ac8b27e264f2) }

var fileDescriptor_df73ac8b27e264f2 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xf6, 0x17, 0x7e, 0x86, 0x11, 0x54, 0x26, 0xc8, 0x9f, 0x86, 0x2c, 0xb2, 0x44, 0x05,
	0x4c, 0x77, 0x52, 0xf0, 0x62, 0xe2, 0xa5, 0x15, 0xe5, 0xe2, 0x41, 0x6a, 0xe2, 0xc1, 0xcb, 0x3a,
	0xdd, 0x7d, 0x19, 0x26, 0xb6, 0x33, 0xcb, 0xce, 0xb4, 0xd2, 0xab, 0x89, 0x57, 0x63, 0xe4, 0xe6,
	0x27, 0x50, 0x4f, 0x1c, 0xf8, 0x04, 0x9e, 0x38, 0x12, 0xbc, 0x18, 0x0f, 0x68, 0xc0, 0x84, 0x0f,
	0xe0, 0x17, 0x30, 0x3b, 0x3b, 0x4a, 0x81, 0x8a, 0x68, 0x8c, 0x97, 0x76, 0x67, 0x9e, 0x77, 0xde,
	0xf7, 0x99, 0xe7, 0x7d, 0xde, 0x41, 0x63, 0xcb, 0xed, 0x18, 0x92, 0x3a, 0x15, 0x40, 0x38, 0x8b,
	0x49, 0xab, 0x44, 0x56, 0x9a, 0x90, 0xb4, 0xfd, 0x38, 0x91, 0x5a, 0xe2, 0x0b, 0x3f, 0x50, 0x9f,
	0xb3, 0xd8, 0x6f, 0x95, 0x0a, 0x03, 0xb4, 0xc1, 0x85, 0x24, 0xe6, 0x37, 0x0b, 0x2a, 0xb8, 0xa1,
	0x54, 0x0d, 0xa9, 0x48, 0x8d, 0x2a, 0x20, 0xad, 0x52, 0x0d, 0x34, 0x2d, 0x91, 0x50, 0x72, 0x61,
	0xf1, 0xd1, 0x0c, 0x0f, 0xcc, 0x8a, 0x64, 0x0b, 0x0b, 0x0d, 0x32, 0xc9, 0x64, 0xb6, 0x9f, 0x7e,
	0xd9, 0xdd, 0x31, 0x26, 0x25, 0xab, 0x03, 0xa1, 0x31, 0x27, 0x54, 0x08, 0xa9, 0xa9, 0xe6, 0x52,
	0xd8, 0x33, 0xde, 0x30, 0xba, 0xb8, 0x00, 0xba, 0x02, 0x02, 0x96, 0x78, 0xc8, 0x69, 0xd2, 0xae,
	0xc2, 0x4a, 0x13, 0x94, 0xf6, 0xee, 0xa2, 0xa1, 0xa3, 0x80, 0x8a, 0xa5, 0x50, 0x80, 0x67, 0xd1,
	0x19, 0x1a, 0x45, 0x09, 0x28, 0x35, 0xe2, 0x5c, 0x72, 0xa6, 0x7a, 0x2b, 0x23, 0xdb, 0x1b, 0xc5,
	0x41, 0xcb, 0xa4, 0x9c, 0x21, 0xf7, 0x75, 0xc2, 0x05, 0xab, 0x7e, 0x0f, 0xf4, 0xde, 0x38, 0x68,
	0x68, 0xb1, 0x29, 0x35, 0x2c, 0x50, 0x75, 0x8f, 0xb6, 0x1b, 0x20, 0xb4, 0x2d, 0x84, 0x8b, 0x08,
	0x47, 0xa0, 0x34, 0x17, 0x86, 0x57, 0x10, 0xc9, 0x06, 0xe5, 0xc2, 0x64, 0xee, 0xaf, 0x0e, 0x74,
	0x20, 0xf3, 0x06, 0xc0, 0x8f, 0x10, 0x62, 0x54, 0x05, 0xb4, 0x21, 0x9b, 0x42, 0x8f, 0xe4, 0x0d,
	0x81, 0xf2, 0xe6, 0xce, 0x78, 0xee, 0xe3, 0xce, 0xf8, 0x15, 0xc6, 0xf5, 0x72, 0xb3, 0xe6, 0x87,
	0xb2, 0x61, 0x95, 0xb1, 0x7f, 0x45, 0x15, 0x3d, 0x26, 0xba, 0x1d, 0x83, 0xf2, 0xe7, 0x21, 0xdc,
	0xde, 0x28, 0x22, 0x4b, 0x77, 0x1e, 0xc2, 0xd7, 0xfb, 0xeb, 0x33, 0x4e, 0xb5, 0x97, 0x51, 0x55,
	0x36, 0x39, 0xbd, 0x97, 0x0e, 0x1a, 0x3e, 0xc6, 0xd5, 0xde, 0xfd, 0x09, 0xea, 0x89, 0x13, 0x1e,
	0x82, 0xe1, 0x77, 0x76, 0x76, 0xd4, 0xb7, 0x79, 0xd2, 0x6e, 0xf9, 0xb6, 0x5b, 0xfe, 0x2d, 0xc9,
	0x45, 0xe5, 0x4e, 0xca, 0xe9, 0xed, 0xa7, 0xf1, 0xa9, 0x53, 0x70, 0x4a, 0x0f, 0xa8, 0x57, 0xfb,
	0xeb, 0x33, 0x7d, 0x75, 0x60, 0x34, 0x6c, 0x07, 0x69, 0xbf, 0x55, 0x46, 0x2c, 0xab, 0xe7, 0x55,
	0xd1, 0xc4, 0x02, 0xe8, 0xdb, 0xab, 0xe1, 0x32, 0x15, 0x0c, 0xaa, 0x54, 0x43, 0x59, 0x44, 0x29,
	0xc1, 0x14, 0xfd, 0x33, 0x29, 0xbd, 0x67, 0x79, 0xe4, 0x9d, 0x94, 0xd4, 0xde, 0x79, 0x09, 0xf5,
	0x83, 0x0d, 0x09, 0x12, 0xaa, 0xc1, 0x76, 0xfd, 0x2f, 0x88, 0xde, 0x07, 0x1d, 0xa5, 0x0f, 0xb4,
	0xcd, 0xff, 0x5b, 0x6d, 0x67, 0xbf, 0xfe, 0x87, 0x7a, 0x16, 0xd3, 0x39, 0xc5, 0xcf, 0x1d, 0x74,
	0xee, 0xb0, 0xeb, 0xf1, 0x55, 0xff, 0xe8, 0xd4, 0xfa, 0x5d, 0x07, 0xa6, 0x30, 0xf5, 0xeb, 0xc0,
	0x4c, 0x50, 0x6f, 0xfa, 0xe9, 0xfb, 0x2f, 0x6b, 0xf9, 0x49, 0x3c, 0x41, 0x8e, 0x3d, 0x17, 0x0c,
	0x74, 0x50, 0xeb, 0xa8, 0xbe, 0xe6, 0xa0, 0xf3, 0x47, 0xbc, 0x88, 0xbb, 0x14, 0xea, 0x3e, 0x5a,
	0x85, 0xe9, 0x53, 0x44, 0x5a, 0x4e, 0xd7, 0x0c, 0xa7, 0xcb, 0x78, 0x92, 0x74, 0x79, 0xc2, 0xa4,
	0x86, 0x20, 0x1d, 0xba, 0xd8, 0x32, 0x78, 0xe7, 0xa0, 0xc2, 0xcf, 0x8d, 0x83, 0xe7, 0xba, 0x2a,
	0x71, 0xb2, 0x77, 0x0b, 0xd7, 0x7f, 0xef, 0x90, 0xa5, 0x7d, 0xc3, 0xd0, 0x9e, 0xc3, 0xa5, 0xee,
	0x52, 0x1e, 0xf2, 0x6d, 0x40, 0x45, 0x94, 0x5d, 0x23, 0x4d, 0x51, 0x79, 0xb0, 0xb9, 0xeb, 0x3a,
	0x5b, 0xbb, 0xae, 0xf3, 0x79, 0xd7, 0x75, 0x5e, 0xec, 0xb9, 0xb9, 0xad, 0x3d, 0x37, 0xf7, 0x61,
	0xcf, 0xcd, 0x3d, 0xbc, 0xd9, 0x61, 0x2b, 0xa5, 0x93, 0x34, 0x41, 0x5d, 0xb6, 0xa0, 0xd8, 0x02,
	0xa1, 0x9b, 0x09, 0xa8, 0x83, 0x5a, 0x45, 0xeb, 0xba, 0x55, 0x53, 0xd4, 0x18, 0xae, 0xf6, 0xbf,
	0x79, 0x58, 0xe7, 0xbe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x30, 0x0d, 0x7b, 0xfa, 0x0c, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Gets the beneficiary
	GetBeneficiary(ctx context.Context, in *GetBeneficiaryRequest, opts ...grpc.CallOption) (*GetBeneficiaryResponse, error)
	// Quotes the amount of native tokens to pay for interchain gas.
	QuoteGasPayment(ctx context.Context, in *QuoteGasPaymentRequest, opts ...grpc.CallOption) (*QuoteGasPaymentResponse, error)
	// Gets the token exchange rate and gas price from the configured gas oracle
	// for a given destination domain.
	GetExchangeRateAndGasPrice(ctx context.Context, in *GetExchangeRateAndGasPriceRequest, opts ...grpc.CallOption) (*GetExchangeRateAndGasPriceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetBeneficiary(ctx context.Context, in *GetBeneficiaryRequest, opts ...grpc.CallOption) (*GetBeneficiaryResponse, error) {
	out := new(GetBeneficiaryResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Query/GetBeneficiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteGasPayment(ctx context.Context, in *QuoteGasPaymentRequest, opts ...grpc.CallOption) (*QuoteGasPaymentResponse, error) {
	out := new(QuoteGasPaymentResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Query/QuoteGasPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetExchangeRateAndGasPrice(ctx context.Context, in *GetExchangeRateAndGasPriceRequest, opts ...grpc.CallOption) (*GetExchangeRateAndGasPriceResponse, error) {
	out := new(GetExchangeRateAndGasPriceResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Query/GetExchangeRateAndGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Gets the beneficiary
	GetBeneficiary(context.Context, *GetBeneficiaryRequest) (*GetBeneficiaryResponse, error)
	// Quotes the amount of native tokens to pay for interchain gas.
	QuoteGasPayment(context.Context, *QuoteGasPaymentRequest) (*QuoteGasPaymentResponse, error)
	// Gets the token exchange rate and gas price from the configured gas oracle
	// for a given destination domain.
	GetExchangeRateAndGasPrice(context.Context, *GetExchangeRateAndGasPriceRequest) (*GetExchangeRateAndGasPriceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (*UnimplementedQueryServer) GetBeneficiary(ctx context.Context, req *GetBeneficiaryRequest) (*GetBeneficiaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeneficiary not implemented")
}

func (*UnimplementedQueryServer) QuoteGasPayment(ctx context.Context, req *QuoteGasPaymentRequest) (*QuoteGasPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteGasPayment not implemented")
}

func (*UnimplementedQueryServer) GetExchangeRateAndGasPrice(ctx context.Context, req *GetExchangeRateAndGasPriceRequest) (*GetExchangeRateAndGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRateAndGasPrice not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetBeneficiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeneficiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBeneficiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Query/GetBeneficiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBeneficiary(ctx, req.(*GetBeneficiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteGasPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteGasPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteGasPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Query/QuoteGasPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteGasPayment(ctx, req.(*QuoteGasPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetExchangeRateAndGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateAndGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetExchangeRateAndGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Query/GetExchangeRateAndGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetExchangeRateAndGasPrice(ctx, req.(*GetExchangeRateAndGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.igp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeneficiary",
			Handler:    _Query_GetBeneficiary_Handler,
		},
		{
			MethodName: "QuoteGasPayment",
			Handler:    _Query_QuoteGasPayment_Handler,
		},
		{
			MethodName: "GetExchangeRateAndGasPrice",
			Handler:    _Query_GetExchangeRateAndGasPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/igp/v1/query.proto",
}

func (m *GetBeneficiaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBeneficiaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBeneficiaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBeneficiaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBeneficiaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBeneficiaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteGasPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteGasPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteGasPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GasAmount.Size()
		i -= size
		if _, err := m.GasAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.DestinationDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuoteGasPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteGasPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteGasPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetExchangeRateAndGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExchangeRateAndGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExchangeRateAndGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetExchangeRateAndGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExchangeRateAndGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExchangeRateAndGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ExchangeRate.Size()
		i -= size
		if _, err := m.ExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *GetBeneficiaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBeneficiaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuoteGasPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovQuery(uint64(m.DestinationDomain))
	}
	l = m.GasAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuoteGasPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetExchangeRateAndGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovQuery(uint64(m.DestinationDomain))
	}
	return n
}

func (m *GetExchangeRateAndGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *GetBeneficiaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBeneficiaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBeneficiaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GetBeneficiaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBeneficiaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBeneficiaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QuoteGasPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteGasPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteGasPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QuoteGasPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteGasPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteGasPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GetExchangeRateAndGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExchangeRateAndGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExchangeRateAndGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GetExchangeRateAndGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExchangeRateAndGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExchangeRateAndGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
