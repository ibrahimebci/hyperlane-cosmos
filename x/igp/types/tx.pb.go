// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/igp/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgPayForGas defines the request type for the Dispatch rpc.
type MsgPayForGas struct {
	Sender            string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageId         string                                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DestinationDomain uint32                                 `protobuf:"varint,3,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	GasAmount         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=gas_amount,json=gasAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"gas_amount"`
	RefundAddress     string                                 `protobuf:"bytes,5,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
}

func (m *MsgPayForGas) Reset()         { *m = MsgPayForGas{} }
func (m *MsgPayForGas) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGas) ProtoMessage()    {}
func (*MsgPayForGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{0}
}

func (m *MsgPayForGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgPayForGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgPayForGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGas.Merge(m, src)
}

func (m *MsgPayForGas) XXX_Size() int {
	return m.Size()
}

func (m *MsgPayForGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGas proto.InternalMessageInfo

// MsgPayForGasResponse defines the Dispatch response type.
type MsgPayForGasResponse struct{}

func (m *MsgPayForGasResponse) Reset()         { *m = MsgPayForGasResponse{} }
func (m *MsgPayForGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGasResponse) ProtoMessage()    {}
func (*MsgPayForGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{1}
}

func (m *MsgPayForGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgPayForGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgPayForGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGasResponse.Merge(m, src)
}

func (m *MsgPayForGasResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgPayForGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGasResponse proto.InternalMessageInfo

// MsgClaim defines the request type for the Claim rpc.
type MsgClaim struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgClaim) Reset()         { *m = MsgClaim{} }
func (m *MsgClaim) String() string { return proto.CompactTextString(m) }
func (*MsgClaim) ProtoMessage()    {}
func (*MsgClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{2}
}

func (m *MsgClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaim.Merge(m, src)
}

func (m *MsgClaim) XXX_Size() int {
	return m.Size()
}

func (m *MsgClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaim proto.InternalMessageInfo

// MsgClaimResponse defines the Claim response type.
type MsgClaimResponse struct{}

func (m *MsgClaimResponse) Reset()         { *m = MsgClaimResponse{} }
func (m *MsgClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimResponse) ProtoMessage()    {}
func (*MsgClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{3}
}

func (m *MsgClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimResponse.Merge(m, src)
}

func (m *MsgClaimResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimResponse proto.InternalMessageInfo

// MsgSetGasOracles defines the request type for the Claim rpc.
type MsgSetGasOracles struct {
	Sender  string             `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Configs []*GasOracleConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *MsgSetGasOracles) Reset()         { *m = MsgSetGasOracles{} }
func (m *MsgSetGasOracles) String() string { return proto.CompactTextString(m) }
func (*MsgSetGasOracles) ProtoMessage()    {}
func (*MsgSetGasOracles) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{4}
}

func (m *MsgSetGasOracles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetGasOracles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGasOracles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetGasOracles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGasOracles.Merge(m, src)
}

func (m *MsgSetGasOracles) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetGasOracles) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGasOracles.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGasOracles proto.InternalMessageInfo

// MsgSetGasOraclesResponse defines the Claim response type.
type MsgSetGasOraclesResponse struct{}

func (m *MsgSetGasOraclesResponse) Reset()         { *m = MsgSetGasOraclesResponse{} }
func (m *MsgSetGasOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetGasOraclesResponse) ProtoMessage()    {}
func (*MsgSetGasOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{5}
}

func (m *MsgSetGasOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetGasOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGasOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetGasOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGasOraclesResponse.Merge(m, src)
}

func (m *MsgSetGasOraclesResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetGasOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGasOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGasOraclesResponse proto.InternalMessageInfo

// MsgSetBeneficiary defines the request type for the SetBeneficiary rpc.
type MsgSetBeneficiary struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgSetBeneficiary) Reset()         { *m = MsgSetBeneficiary{} }
func (m *MsgSetBeneficiary) String() string { return proto.CompactTextString(m) }
func (*MsgSetBeneficiary) ProtoMessage()    {}
func (*MsgSetBeneficiary) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{6}
}

func (m *MsgSetBeneficiary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetBeneficiary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBeneficiary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetBeneficiary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBeneficiary.Merge(m, src)
}

func (m *MsgSetBeneficiary) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetBeneficiary) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBeneficiary.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBeneficiary proto.InternalMessageInfo

// MsgSetBeneficiaryResponse defines the Claim response type.
type MsgSetBeneficiaryResponse struct{}

func (m *MsgSetBeneficiaryResponse) Reset()         { *m = MsgSetBeneficiaryResponse{} }
func (m *MsgSetBeneficiaryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBeneficiaryResponse) ProtoMessage()    {}
func (*MsgSetBeneficiaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{7}
}

func (m *MsgSetBeneficiaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetBeneficiaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBeneficiaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetBeneficiaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBeneficiaryResponse.Merge(m, src)
}

func (m *MsgSetBeneficiaryResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetBeneficiaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBeneficiaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBeneficiaryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPayForGas)(nil), "hyperlane.igp.v1.MsgPayForGas")
	proto.RegisterType((*MsgPayForGasResponse)(nil), "hyperlane.igp.v1.MsgPayForGasResponse")
	proto.RegisterType((*MsgClaim)(nil), "hyperlane.igp.v1.MsgClaim")
	proto.RegisterType((*MsgClaimResponse)(nil), "hyperlane.igp.v1.MsgClaimResponse")
	proto.RegisterType((*MsgSetGasOracles)(nil), "hyperlane.igp.v1.MsgSetGasOracles")
	proto.RegisterType((*MsgSetGasOraclesResponse)(nil), "hyperlane.igp.v1.MsgSetGasOraclesResponse")
	proto.RegisterType((*MsgSetBeneficiary)(nil), "hyperlane.igp.v1.MsgSetBeneficiary")
	proto.RegisterType((*MsgSetBeneficiaryResponse)(nil), "hyperlane.igp.v1.MsgSetBeneficiaryResponse")
}

func init() { proto.RegisterFile("hyperlane/igp/v1/tx.proto", fileDescriptor_db701085baeb3386) }

var fileDescriptor_db701085baeb3386 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0x2e, 0x02, 0xee, 0x28, 0x04, 0x1a, 0xa2, 0xdd, 0x2a, 0x5d, 0xa8, 0x09, 0x21, 0x6b,
	0x76, 0x2b, 0x18, 0x0f, 0xae, 0x26, 0x86, 0x1f, 0x91, 0x78, 0x20, 0x9a, 0x92, 0x78, 0xf0, 0x52,
	0x87, 0x76, 0x18, 0x26, 0x6e, 0x67, 0x9a, 0x4e, 0x77, 0xc3, 0xde, 0x8c, 0x27, 0xe3, 0xc9, 0x3f,
	0x81, 0xa3, 0x47, 0x0e, 0x78, 0xf3, 0x0f, 0xe0, 0x48, 0x38, 0x19, 0x0f, 0xc4, 0xc0, 0x01, 0x6e,
	0xfe, 0x0b, 0x66, 0xa7, 0xd3, 0x5a, 0xd8, 0xad, 0xab, 0x5c, 0x76, 0x3b, 0xef, 0xfb, 0xde, 0xbc,
	0xef, 0x7b, 0x7d, 0x7d, 0xa0, 0xbc, 0xdd, 0x09, 0x50, 0xd8, 0x84, 0x14, 0x59, 0x04, 0x07, 0x56,
	0x7b, 0xc1, 0x8a, 0x76, 0xea, 0x41, 0xc8, 0x22, 0xa6, 0x4e, 0xa4, 0x50, 0x9d, 0xe0, 0xa0, 0xde,
	0x5e, 0xd0, 0x27, 0xa1, 0x4f, 0x28, 0xb3, 0xc4, 0x6f, 0x4c, 0xd2, 0x6f, 0xbb, 0x8c, 0xfb, 0x8c,
	0x5b, 0x3e, 0xc7, 0xdd, 0x64, 0x9f, 0x63, 0x09, 0x94, 0x63, 0xc0, 0x11, 0x27, 0x2b, 0x3e, 0x48,
	0x68, 0x0a, 0x33, 0xcc, 0xe2, 0x78, 0xf7, 0x49, 0x46, 0xef, 0xf6, 0x2a, 0xe9, 0x04, 0x48, 0xe6,
	0x98, 0xe7, 0x45, 0x70, 0x73, 0x9d, 0xe3, 0x57, 0xb0, 0xf3, 0x9c, 0x85, 0x6b, 0x90, 0xab, 0x0f,
	0xc0, 0x08, 0x47, 0xd4, 0x43, 0xa1, 0xa6, 0xcc, 0x28, 0xf3, 0xa5, 0x65, 0xed, 0x68, 0xbf, 0x36,
	0x25, 0xcb, 0x2c, 0x79, 0x5e, 0x88, 0x38, 0xdf, 0x88, 0x42, 0x42, 0xb1, 0x2d, 0x79, 0xea, 0x34,
	0x00, 0x3e, 0xe2, 0x1c, 0x62, 0xe4, 0x10, 0x4f, 0x2b, 0x76, 0xb3, 0xec, 0x92, 0x8c, 0xbc, 0xf0,
	0xd4, 0x1a, 0x50, 0x3d, 0xc4, 0x23, 0x42, 0x61, 0x44, 0x18, 0x75, 0x3c, 0xe6, 0x43, 0x42, 0xb5,
	0xa1, 0x19, 0x65, 0x7e, 0xcc, 0x9e, 0xcc, 0x20, 0xab, 0x02, 0x50, 0xdf, 0x02, 0x80, 0x21, 0x77,
	0xa0, 0xcf, 0x5a, 0x34, 0xd2, 0xae, 0x09, 0x0d, 0x4b, 0x07, 0xc7, 0x95, 0xc2, 0x8f, 0xe3, 0xca,
	0x1c, 0x26, 0xd1, 0x76, 0x6b, 0xb3, 0xee, 0x32, 0x5f, 0x3a, 0x97, 0x7f, 0x35, 0xee, 0xbd, 0x93,
	0xb6, 0x56, 0x91, 0x7b, 0xb4, 0x5f, 0x03, 0x52, 0xf1, 0x2a, 0x72, 0xbf, 0x9c, 0xed, 0x55, 0x15,
	0xbb, 0x84, 0x21, 0x5f, 0x12, 0x77, 0xaa, 0xcf, 0xc0, 0x78, 0x88, 0xb6, 0x5a, 0xd4, 0x73, 0x60,
	0xec, 0x47, 0x1b, 0x1e, 0xe0, 0x74, 0x2c, 0xe6, 0xcb, 0x60, 0xe3, 0xd1, 0xc7, 0xdd, 0x4a, 0xe1,
	0x7c, 0xb7, 0x52, 0xf8, 0x70, 0xb6, 0x57, 0x95, 0x5d, 0xf8, 0x74, 0xb6, 0x57, 0x9d, 0x4e, 0x3b,
	0x5d, 0x93, 0xea, 0xb2, 0x9d, 0x35, 0x6f, 0x81, 0xa9, 0xec, 0xd9, 0x46, 0x3c, 0x60, 0x94, 0x23,
	0x93, 0x81, 0xeb, 0xeb, 0x1c, 0xaf, 0x34, 0x21, 0xf1, 0xff, 0xbf, 0xfb, 0x8d, 0x85, 0x1c, 0x31,
	0xe5, 0x7e, 0x62, 0x44, 0x11, 0x53, 0x05, 0x13, 0xc9, 0x73, 0x2a, 0xe2, 0x9b, 0x22, 0x82, 0x1b,
	0x28, 0x5a, 0x83, 0xfc, 0x65, 0x08, 0xdd, 0x26, 0xba, 0xca, 0x2c, 0x3c, 0x01, 0xa3, 0x2e, 0xa3,
	0x5b, 0x04, 0x73, 0xad, 0x38, 0x33, 0x34, 0x7f, 0x63, 0x71, 0xb6, 0x7e, 0x79, 0xda, 0xeb, 0x69,
	0x81, 0x15, 0xc1, 0xb4, 0x93, 0x8c, 0xc6, 0xe3, 0x1c, 0x2b, 0xb3, 0xfd, 0xac, 0x5c, 0x50, 0x6a,
	0xea, 0x40, 0xbb, 0x1c, 0x4b, 0xad, 0x7d, 0x55, 0xc0, 0x64, 0x0c, 0x2e, 0x23, 0x8a, 0xb6, 0x88,
	0x4b, 0x60, 0xd8, 0xb9, 0x82, 0xb7, 0x45, 0x30, 0x9a, 0x0c, 0x4c, 0x71, 0x40, 0x4a, 0x42, 0x6c,
	0x34, 0x72, 0x2c, 0x99, 0x39, 0x96, 0x32, 0x0a, 0xcd, 0x3b, 0xa0, 0xdc, 0x13, 0x4c, 0x4c, 0x2d,
	0xfe, 0x2a, 0x82, 0xa1, 0x75, 0x8e, 0xd5, 0x0d, 0x50, 0xfa, 0xf3, 0xed, 0x1a, 0xbd, 0xcd, 0xce,
	0x4e, 0x9c, 0x3e, 0xf7, 0x77, 0x3c, 0xb9, 0x5c, 0x5d, 0x03, 0xc3, 0xf1, 0x38, 0xea, 0x7d, 0x13,
	0x04, 0xa6, 0x9b, 0xf9, 0x58, 0x7a, 0x91, 0x03, 0xc6, 0x2e, 0x4e, 0x54, 0xff, 0xa4, 0x0b, 0x1c,
	0xbd, 0x3a, 0x98, 0x93, 0x16, 0xd8, 0x04, 0xe3, 0x97, 0xde, 0xeb, 0xbd, 0xbc, 0xec, 0x0c, 0x49,
	0xbf, 0xff, 0x0f, 0xa4, 0xa4, 0x86, 0x3e, 0xfc, 0xbe, 0xbb, 0x41, 0x96, 0x5f, 0x1f, 0x9c, 0x18,
	0xca, 0xe1, 0x89, 0xa1, 0xfc, 0x3c, 0x31, 0x94, 0xcf, 0xa7, 0x46, 0xe1, 0xf0, 0xd4, 0x28, 0x7c,
	0x3f, 0x35, 0x0a, 0x6f, 0x9e, 0x66, 0xd6, 0x12, 0x8f, 0x42, 0x48, 0x31, 0x6a, 0xb2, 0x36, 0xaa,
	0xb5, 0x11, 0x8d, 0x5a, 0x21, 0xe2, 0x56, 0xcf, 0xcb, 0xde, 0x11, 0xab, 0x58, 0x2c, 0xac, 0xcd,
	0x11, 0xb1, 0x88, 0x1f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x86, 0x0f, 0x2b, 0x32, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Deposits a payment for the relaying of a message to its destination chain.
	PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error)
	// Transfers the entire native token balance to the beneficiary.
	Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error)
	// Sets the gas oracles for remote domains specified in the config array.
	SetGasOracles(ctx context.Context, in *MsgSetGasOracles, opts ...grpc.CallOption) (*MsgSetGasOraclesResponse, error)
	// Sets the beneficiary.
	SetBeneficiary(ctx context.Context, in *MsgSetBeneficiary, opts ...grpc.CallOption) (*MsgSetBeneficiaryResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error) {
	out := new(MsgPayForGasResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/PayForGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error) {
	out := new(MsgClaimResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetGasOracles(ctx context.Context, in *MsgSetGasOracles, opts ...grpc.CallOption) (*MsgSetGasOraclesResponse, error) {
	out := new(MsgSetGasOraclesResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetGasOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBeneficiary(ctx context.Context, in *MsgSetBeneficiary, opts ...grpc.CallOption) (*MsgSetBeneficiaryResponse, error) {
	out := new(MsgSetBeneficiaryResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetBeneficiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Deposits a payment for the relaying of a message to its destination chain.
	PayForGas(context.Context, *MsgPayForGas) (*MsgPayForGasResponse, error)
	// Transfers the entire native token balance to the beneficiary.
	Claim(context.Context, *MsgClaim) (*MsgClaimResponse, error)
	// Sets the gas oracles for remote domains specified in the config array.
	SetGasOracles(context.Context, *MsgSetGasOracles) (*MsgSetGasOraclesResponse, error)
	// Sets the beneficiary.
	SetBeneficiary(context.Context, *MsgSetBeneficiary) (*MsgSetBeneficiaryResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct{}

func (*UnimplementedMsgServer) PayForGas(ctx context.Context, req *MsgPayForGas) (*MsgPayForGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForGas not implemented")
}

func (*UnimplementedMsgServer) Claim(ctx context.Context, req *MsgClaim) (*MsgClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}

func (*UnimplementedMsgServer) SetGasOracles(ctx context.Context, req *MsgSetGasOracles) (*MsgSetGasOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGasOracles not implemented")
}

func (*UnimplementedMsgServer) SetBeneficiary(ctx context.Context, req *MsgSetBeneficiary) (*MsgSetBeneficiaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeneficiary not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PayForGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/PayForGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForGas(ctx, req.(*MsgPayForGas))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Claim(ctx, req.(*MsgClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetGasOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetGasOracles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetGasOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetGasOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetGasOracles(ctx, req.(*MsgSetGasOracles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBeneficiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBeneficiary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBeneficiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetBeneficiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBeneficiary(ctx, req.(*MsgSetBeneficiary))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.igp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayForGas",
			Handler:    _Msg_PayForGas_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Msg_Claim_Handler,
		},
		{
			MethodName: "SetGasOracles",
			Handler:    _Msg_SetGasOracles_Handler,
		},
		{
			MethodName: "SetBeneficiary",
			Handler:    _Msg_SetBeneficiary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/igp/v1/tx.proto",
}

func (m *MsgPayForGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.GasAmount.Size()
		i -= size
		if _, err := m.GasAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetGasOracles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGasOracles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGasOracles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetGasOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGasOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGasOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetBeneficiary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBeneficiary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBeneficiary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBeneficiaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBeneficiaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBeneficiaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgPayForGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = m.GasAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPayForGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetGasOracles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetGasOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetBeneficiary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBeneficiaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgPayForGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgPayForGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetGasOracles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGasOracles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGasOracles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &GasOracleConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetGasOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGasOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGasOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetBeneficiary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBeneficiary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBeneficiary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetBeneficiaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBeneficiaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBeneficiaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
