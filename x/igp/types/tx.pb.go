// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/igp/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetRemoteGasData defines the gas exchange rate and gas price
type MsgSetRemoteGasData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The IGP that this gas oracle config belongs to
	IgpId             uint32                                 `protobuf:"varint,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	RemoteDomain      uint32                                 `protobuf:"varint,3,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	TokenExchangeRate github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_exchange_rate,json=tokenExchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_exchange_rate"`
	GasPrice          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gas_price"`
}

func (m *MsgSetRemoteGasData) Reset()         { *m = MsgSetRemoteGasData{} }
func (m *MsgSetRemoteGasData) String() string { return proto.CompactTextString(m) }
func (*MsgSetRemoteGasData) ProtoMessage()    {}
func (*MsgSetRemoteGasData) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{0}
}

func (m *MsgSetRemoteGasData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetRemoteGasData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRemoteGasData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetRemoteGasData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRemoteGasData.Merge(m, src)
}

func (m *MsgSetRemoteGasData) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetRemoteGasData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRemoteGasData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRemoteGasData proto.InternalMessageInfo

// MsgSetRemoteGasDataResponse defines the MsgSetRemoteGasData response type.
type MsgSetRemoteGasDataResponse struct{}

func (m *MsgSetRemoteGasDataResponse) Reset()         { *m = MsgSetRemoteGasDataResponse{} }
func (m *MsgSetRemoteGasDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetRemoteGasDataResponse) ProtoMessage()    {}
func (*MsgSetRemoteGasDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{1}
}

func (m *MsgSetRemoteGasDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetRemoteGasDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRemoteGasDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetRemoteGasDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRemoteGasDataResponse.Merge(m, src)
}

func (m *MsgSetRemoteGasDataResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetRemoteGasDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRemoteGasDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRemoteGasDataResponse proto.InternalMessageInfo

// MsgPayForGas submits payment for the relaying of a message to its destination
// chain..
type MsgPayForGas struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageId         string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DestinationDomain uint32 `protobuf:"varint,3,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	// The amount of destination gas you are willing to pay for
	GasAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=gas_amount,json=gasAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gas_amount"`
	// The maximum payment (in the chain's native denom) that will be paid for
	// relaying fees. If the required payment is less than this amount (according
	// to quoteGasPayment), the lesser is charged. If the required payment exceeds
	// this amount, the transaction will fail (no charge).
	MaximumPayment types.Coin `protobuf:"bytes,5,opt,name=maximum_payment,json=maximumPayment,proto3" json:"maximum_payment"`
	RefundAddress  string     `protobuf:"bytes,6,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
	RelayerAddress string     `protobuf:"bytes,7,opt,name=relayer_address,json=relayerAddress,proto3" json:"relayer_address,omitempty"`
	// If any IGP other than the default (0) was used, this should be specified.
	// We will use it to check gas costs to make sure the payer is not overpaying.
	IgpId uint32 `protobuf:"varint,8,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
}

func (m *MsgPayForGas) Reset()         { *m = MsgPayForGas{} }
func (m *MsgPayForGas) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGas) ProtoMessage()    {}
func (*MsgPayForGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{2}
}

func (m *MsgPayForGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgPayForGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgPayForGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGas.Merge(m, src)
}

func (m *MsgPayForGas) XXX_Size() int {
	return m.Size()
}

func (m *MsgPayForGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGas proto.InternalMessageInfo

// MsgPayForGasResponse defines the PayForGas response type.
type MsgPayForGasResponse struct{}

func (m *MsgPayForGasResponse) Reset()         { *m = MsgPayForGasResponse{} }
func (m *MsgPayForGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGasResponse) ProtoMessage()    {}
func (*MsgPayForGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{3}
}

func (m *MsgPayForGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgPayForGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgPayForGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGasResponse.Merge(m, src)
}

func (m *MsgPayForGasResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgPayForGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGasResponse proto.InternalMessageInfo

// MsgSetDestinationGasOverhead defines the overhead gas amount for the given
// destination.
type MsgSetDestinationGasOverhead struct {
	Sender            string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DestinationDomain uint32                                 `protobuf:"varint,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	GasOverhead       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=gas_overhead,json=gasOverhead,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gas_overhead"`
	// Identifies the IGP the gas overhead configuration applies to
	IgpId uint32 `protobuf:"varint,4,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
}

func (m *MsgSetDestinationGasOverhead) Reset()         { *m = MsgSetDestinationGasOverhead{} }
func (m *MsgSetDestinationGasOverhead) String() string { return proto.CompactTextString(m) }
func (*MsgSetDestinationGasOverhead) ProtoMessage()    {}
func (*MsgSetDestinationGasOverhead) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{4}
}

func (m *MsgSetDestinationGasOverhead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetDestinationGasOverhead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDestinationGasOverhead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetDestinationGasOverhead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDestinationGasOverhead.Merge(m, src)
}

func (m *MsgSetDestinationGasOverhead) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetDestinationGasOverhead) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDestinationGasOverhead.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDestinationGasOverhead proto.InternalMessageInfo

// MsgSetDestinationGasOverheadResponse defines the SetDestinationGasOverhead
// response type.
type MsgSetDestinationGasOverheadResponse struct{}

func (m *MsgSetDestinationGasOverheadResponse) Reset()         { *m = MsgSetDestinationGasOverheadResponse{} }
func (m *MsgSetDestinationGasOverheadResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDestinationGasOverheadResponse) ProtoMessage()    {}
func (*MsgSetDestinationGasOverheadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{5}
}

func (m *MsgSetDestinationGasOverheadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetDestinationGasOverheadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDestinationGasOverheadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetDestinationGasOverheadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDestinationGasOverheadResponse.Merge(m, src)
}

func (m *MsgSetDestinationGasOverheadResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetDestinationGasOverheadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDestinationGasOverheadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDestinationGasOverheadResponse proto.InternalMessageInfo

// MsgClaim defines the request type for the Claim rpc.
type MsgClaim struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgClaim) Reset()         { *m = MsgClaim{} }
func (m *MsgClaim) String() string { return proto.CompactTextString(m) }
func (*MsgClaim) ProtoMessage()    {}
func (*MsgClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{6}
}

func (m *MsgClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaim.Merge(m, src)
}

func (m *MsgClaim) XXX_Size() int {
	return m.Size()
}

func (m *MsgClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaim proto.InternalMessageInfo

// MsgClaimResponse defines the Claim response type.
type MsgClaimResponse struct{}

func (m *MsgClaimResponse) Reset()         { *m = MsgClaimResponse{} }
func (m *MsgClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimResponse) ProtoMessage()    {}
func (*MsgClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{7}
}

func (m *MsgClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimResponse.Merge(m, src)
}

func (m *MsgClaimResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimResponse proto.InternalMessageInfo

// MsgSetGasOracles set the addresses allowed to define spot prices for relay
// fee payment.
type MsgSetGasOracles struct {
	Sender  string             `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Configs []*GasOracleConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *MsgSetGasOracles) Reset()         { *m = MsgSetGasOracles{} }
func (m *MsgSetGasOracles) String() string { return proto.CompactTextString(m) }
func (*MsgSetGasOracles) ProtoMessage()    {}
func (*MsgSetGasOracles) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{8}
}

func (m *MsgSetGasOracles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetGasOracles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGasOracles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetGasOracles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGasOracles.Merge(m, src)
}

func (m *MsgSetGasOracles) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetGasOracles) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGasOracles.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGasOracles proto.InternalMessageInfo

// MsgSetGasOraclesResponse defines the Claim response type.
type MsgSetGasOraclesResponse struct{}

func (m *MsgSetGasOraclesResponse) Reset()         { *m = MsgSetGasOraclesResponse{} }
func (m *MsgSetGasOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetGasOraclesResponse) ProtoMessage()    {}
func (*MsgSetGasOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{9}
}

func (m *MsgSetGasOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetGasOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGasOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetGasOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGasOraclesResponse.Merge(m, src)
}

func (m *MsgSetGasOraclesResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetGasOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGasOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGasOraclesResponse proto.InternalMessageInfo

// MsgSetBeneficiary defines the request type for the SetBeneficiary rpc.
type MsgSetBeneficiary struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The IGP the beneficiary is being set for
	IgpId uint32 `protobuf:"varint,3,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
}

func (m *MsgSetBeneficiary) Reset()         { *m = MsgSetBeneficiary{} }
func (m *MsgSetBeneficiary) String() string { return proto.CompactTextString(m) }
func (*MsgSetBeneficiary) ProtoMessage()    {}
func (*MsgSetBeneficiary) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{10}
}

func (m *MsgSetBeneficiary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetBeneficiary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBeneficiary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetBeneficiary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBeneficiary.Merge(m, src)
}

func (m *MsgSetBeneficiary) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetBeneficiary) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBeneficiary.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBeneficiary proto.InternalMessageInfo

// MsgSetBeneficiaryResponse defines the MsgSetBeneficiary response type.
type MsgSetBeneficiaryResponse struct{}

func (m *MsgSetBeneficiaryResponse) Reset()         { *m = MsgSetBeneficiaryResponse{} }
func (m *MsgSetBeneficiaryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBeneficiaryResponse) ProtoMessage()    {}
func (*MsgSetBeneficiaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{11}
}

func (m *MsgSetBeneficiaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetBeneficiaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBeneficiaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetBeneficiaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBeneficiaryResponse.Merge(m, src)
}

func (m *MsgSetBeneficiaryResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetBeneficiaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBeneficiaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBeneficiaryResponse proto.InternalMessageInfo

// MsgCreateIgp defines the request type to create a hyperlane IGP.
type MsgCreateIgp struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// If empty, the sender will be considered the beneficiary
	Beneficiary string `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	// TODO: Do we really want this in the IGP creation (as it is in the hyperlane
	// .sol contract)? Or the gas oracle?
	TokenExchangeRateScale github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=token_exchange_rate_scale,json=tokenExchangeRateScale,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_exchange_rate_scale"`
}

func (m *MsgCreateIgp) Reset()         { *m = MsgCreateIgp{} }
func (m *MsgCreateIgp) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIgp) ProtoMessage()    {}
func (*MsgCreateIgp) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{12}
}

func (m *MsgCreateIgp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCreateIgp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIgp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCreateIgp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIgp.Merge(m, src)
}

func (m *MsgCreateIgp) XXX_Size() int {
	return m.Size()
}

func (m *MsgCreateIgp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIgp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIgp proto.InternalMessageInfo

// MsgCreateIgpResponse defines the MsgCreateIgp response type.
type MsgCreateIgpResponse struct {
	// The unique ID assigned to the newly created IGP
	IgpId uint32 `protobuf:"varint,1,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
}

func (m *MsgCreateIgpResponse) Reset()         { *m = MsgCreateIgpResponse{} }
func (m *MsgCreateIgpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIgpResponse) ProtoMessage()    {}
func (*MsgCreateIgpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db701085baeb3386, []int{13}
}

func (m *MsgCreateIgpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCreateIgpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIgpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCreateIgpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIgpResponse.Merge(m, src)
}

func (m *MsgCreateIgpResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgCreateIgpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIgpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIgpResponse proto.InternalMessageInfo

func (m *MsgCreateIgpResponse) GetIgpId() uint32 {
	if m != nil {
		return m.IgpId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSetRemoteGasData)(nil), "hyperlane.igp.v1.MsgSetRemoteGasData")
	proto.RegisterType((*MsgSetRemoteGasDataResponse)(nil), "hyperlane.igp.v1.MsgSetRemoteGasDataResponse")
	proto.RegisterType((*MsgPayForGas)(nil), "hyperlane.igp.v1.MsgPayForGas")
	proto.RegisterType((*MsgPayForGasResponse)(nil), "hyperlane.igp.v1.MsgPayForGasResponse")
	proto.RegisterType((*MsgSetDestinationGasOverhead)(nil), "hyperlane.igp.v1.MsgSetDestinationGasOverhead")
	proto.RegisterType((*MsgSetDestinationGasOverheadResponse)(nil), "hyperlane.igp.v1.MsgSetDestinationGasOverheadResponse")
	proto.RegisterType((*MsgClaim)(nil), "hyperlane.igp.v1.MsgClaim")
	proto.RegisterType((*MsgClaimResponse)(nil), "hyperlane.igp.v1.MsgClaimResponse")
	proto.RegisterType((*MsgSetGasOracles)(nil), "hyperlane.igp.v1.MsgSetGasOracles")
	proto.RegisterType((*MsgSetGasOraclesResponse)(nil), "hyperlane.igp.v1.MsgSetGasOraclesResponse")
	proto.RegisterType((*MsgSetBeneficiary)(nil), "hyperlane.igp.v1.MsgSetBeneficiary")
	proto.RegisterType((*MsgSetBeneficiaryResponse)(nil), "hyperlane.igp.v1.MsgSetBeneficiaryResponse")
	proto.RegisterType((*MsgCreateIgp)(nil), "hyperlane.igp.v1.MsgCreateIgp")
	proto.RegisterType((*MsgCreateIgpResponse)(nil), "hyperlane.igp.v1.MsgCreateIgpResponse")
}

func init() { proto.RegisterFile("hyperlane/igp/v1/tx.proto", fileDescriptor_db701085baeb3386) }

var fileDescriptor_db701085baeb3386 = []byte{
	// 1036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xbd, 0x6f, 0x23, 0x45,
	0x14, 0xf7, 0x3a, 0xb9, 0x24, 0x9e, 0x7c, 0x5c, 0xb2, 0x17, 0x0e, 0xdb, 0x97, 0xd8, 0xb9, 0xbd,
	0x23, 0x8a, 0x82, 0xbc, 0xc6, 0x41, 0x20, 0x61, 0x4e, 0x42, 0xf9, 0x22, 0x72, 0x61, 0x11, 0xd9,
	0x12, 0x05, 0x05, 0x66, 0xec, 0x7d, 0x19, 0xaf, 0xce, 0x3b, 0xb3, 0xec, 0x8c, 0xad, 0x58, 0xa2,
	0x40, 0xd0, 0x20, 0x2a, 0x0a, 0xe8, 0xaf, 0xa4, 0x0c, 0xd2, 0x95, 0x74, 0x34, 0x29, 0x28, 0x4e,
	0x57, 0x21, 0x8a, 0x08, 0x25, 0x45, 0x90, 0xf8, 0x27, 0xd0, 0xee, 0x8e, 0xd7, 0x7b, 0xf1, 0xee,
	0xe5, 0x62, 0xa5, 0x49, 0x3c, 0xef, 0xfb, 0xfd, 0xde, 0xef, 0xcd, 0x2c, 0xca, 0xb4, 0xfb, 0x36,
	0x38, 0x1d, 0x4c, 0xa1, 0x68, 0x12, 0xbb, 0xd8, 0x2b, 0x15, 0xc5, 0xb1, 0x6e, 0x3b, 0x4c, 0x30,
	0x75, 0x31, 0x50, 0xe9, 0x26, 0xb1, 0xf5, 0x5e, 0x29, 0xbb, 0x84, 0x2d, 0x93, 0xb2, 0xa2, 0xf7,
	0xd7, 0x37, 0xca, 0xbe, 0xdd, 0x62, 0xdc, 0x62, 0xbc, 0x68, 0x71, 0xe2, 0x3a, 0x5b, 0x9c, 0x48,
	0x45, 0xc6, 0x57, 0x34, 0xbc, 0x53, 0xd1, 0x3f, 0x48, 0xd5, 0x32, 0x61, 0x84, 0xf9, 0x72, 0xf7,
	0x97, 0x94, 0xae, 0x8c, 0x56, 0xd2, 0xb7, 0x61, 0xe0, 0x93, 0x93, 0x79, 0x9a, 0x98, 0x43, 0xb1,
	0x57, 0x6a, 0x82, 0xc0, 0xa5, 0x62, 0x8b, 0x99, 0xd4, 0xd7, 0x6b, 0x3f, 0x4f, 0xa0, 0x7b, 0x55,
	0x4e, 0xea, 0x20, 0x6a, 0x60, 0x31, 0x01, 0x07, 0x98, 0xef, 0x61, 0x81, 0xd5, 0xf7, 0xd0, 0x14,
	0x07, 0x6a, 0x80, 0x93, 0x56, 0xd6, 0x94, 0x8d, 0xd4, 0x4e, 0xfa, 0xe5, 0xf3, 0xc2, 0xb2, 0xac,
	0x66, 0xdb, 0x30, 0x1c, 0xe0, 0xbc, 0x2e, 0x1c, 0x93, 0x92, 0x9a, 0xb4, 0x53, 0xdf, 0x42, 0x53,
	0x26, 0xb1, 0x1b, 0xa6, 0x91, 0x4e, 0xae, 0x29, 0x1b, 0xf3, 0xb5, 0x3b, 0x26, 0xb1, 0x2b, 0x86,
	0xfa, 0x08, 0xcd, 0x3b, 0x5e, 0xe4, 0x86, 0xc1, 0x2c, 0x6c, 0xd2, 0xf4, 0x84, 0xa7, 0x9d, 0xf3,
	0x85, 0x7b, 0x9e, 0x4c, 0xfd, 0x1a, 0xdd, 0x13, 0xec, 0x29, 0xd0, 0x06, 0x1c, 0xb7, 0xda, 0x98,
	0x12, 0x68, 0x38, 0x58, 0x40, 0x7a, 0xd2, 0x4b, 0xbd, 0x7d, 0x7a, 0x96, 0x4f, 0xfc, 0x7d, 0x96,
	0x5f, 0x27, 0xa6, 0x68, 0x77, 0x9b, 0x7a, 0x8b, 0x59, 0x12, 0x17, 0xf9, 0xaf, 0xc0, 0x8d, 0xa7,
	0xb2, 0xe9, 0x0a, 0x15, 0x2f, 0x9f, 0x17, 0x90, 0x2c, 0xb4, 0x42, 0xc5, 0xaf, 0x97, 0x27, 0x9b,
	0x4a, 0x6d, 0xc9, 0x8b, 0xbe, 0x2f, 0x83, 0xd7, 0xb0, 0x00, 0xf5, 0x4b, 0x94, 0x22, 0xd8, 0x85,
	0xd9, 0x6c, 0x41, 0xfa, 0xce, 0x6d, 0x25, 0x9a, 0x21, 0x98, 0x1f, 0xba, 0x21, 0xcb, 0x4f, 0x7e,
	0x78, 0x96, 0x4f, 0xfc, 0xfb, 0x2c, 0x9f, 0xf8, 0xee, 0xf2, 0x64, 0x53, 0x62, 0xf4, 0xe3, 0xe5,
	0xc9, 0xe6, 0xe3, 0x60, 0x5c, 0x05, 0x19, 0x3b, 0x02, 0x7e, 0x6d, 0x15, 0x3d, 0x88, 0x10, 0xd7,
	0x80, 0xdb, 0x8c, 0x72, 0xd0, 0x7e, 0x99, 0x44, 0x73, 0x55, 0x4e, 0x0e, 0x71, 0xff, 0x53, 0xe6,
	0x1c, 0x60, 0x3e, 0xc6, 0xb8, 0x56, 0x11, 0xb2, 0x80, 0x73, 0x4c, 0x60, 0x30, 0xb2, 0x54, 0x2d,
	0x25, 0x25, 0x15, 0x43, 0x2d, 0x20, 0xd5, 0x00, 0x2e, 0x4c, 0x8a, 0x85, 0xc9, 0xe8, 0xab, 0xb3,
	0x5b, 0x0a, 0x69, 0xe4, 0x00, 0xbf, 0x42, 0xc8, 0x45, 0x13, 0x5b, 0xac, 0x4b, 0xc5, 0xed, 0xcd,
	0xcd, 0x1d, 0xd1, 0xb6, 0x17, 0x53, 0xad, 0xa2, 0xbb, 0x16, 0x3e, 0x36, 0xad, 0xae, 0xd5, 0xb0,
	0x71, 0xdf, 0x02, 0x2a, 0xbc, 0xa9, 0xcd, 0x6e, 0x65, 0x74, 0xe9, 0xe5, 0x52, 0x5c, 0x97, 0x14,
	0xd7, 0x77, 0x99, 0x49, 0x77, 0x52, 0x6e, 0x05, 0x7e, 0xa4, 0x05, 0xe9, 0x7c, 0xe8, 0xfb, 0xaa,
	0x9f, 0xa0, 0x05, 0x07, 0x8e, 0xba, 0xd4, 0x68, 0x60, 0x1f, 0x9e, 0xf4, 0xd4, 0x35, 0xc0, 0xcd,
	0xfb, 0xf6, 0x52, 0xa8, 0xee, 0xa3, 0xbb, 0x0e, 0x74, 0x70, 0x1f, 0x9c, 0x20, 0xc2, 0xb4, 0x17,
	0x61, 0xe5, 0xf4, 0x2c, 0xaf, 0xc4, 0x46, 0x59, 0x90, 0x4e, 0x83, 0x30, 0xc3, 0xad, 0x99, 0x09,
	0x6d, 0x4d, 0xf9, 0x83, 0x18, 0xf6, 0xac, 0x46, 0xb1, 0x27, 0xa0, 0x81, 0x76, 0x1f, 0x2d, 0x87,
	0xcf, 0x01, 0x5f, 0xfe, 0x48, 0xa2, 0x15, 0x9f, 0x4f, 0x7b, 0xc3, 0xd1, 0x1d, 0x60, 0xfe, 0x59,
	0x0f, 0x9c, 0x36, 0x60, 0x63, 0x0c, 0xfe, 0x44, 0x13, 0x24, 0x19, 0x47, 0x10, 0x03, 0xcd, 0xb9,
	0x04, 0x61, 0x32, 0xa1, 0xc7, 0xa4, 0x5b, 0xa1, 0xc8, 0x2c, 0x09, 0xb5, 0x31, 0x44, 0x73, 0x32,
	0x8c, 0xe6, 0x7e, 0x0c, 0x9a, 0x85, 0x98, 0x5d, 0x8c, 0x06, 0x49, 0x5b, 0x47, 0x8f, 0x5f, 0xa7,
	0x0f, 0xd0, 0x66, 0x68, 0xa6, 0xca, 0xc9, 0x6e, 0x07, 0x9b, 0xd6, 0xcd, 0x81, 0x2d, 0x97, 0x62,
	0x8a, 0xcd, 0x44, 0x15, 0xeb, 0x25, 0xd1, 0x54, 0xb4, 0x38, 0xf8, 0x1d, 0x14, 0xf1, 0xbb, 0xe2,
	0x09, 0xeb, 0x20, 0xdc, 0x12, 0x1d, 0xdc, 0xea, 0xc0, 0x38, 0xd7, 0xc4, 0xc7, 0x68, 0xba, 0xc5,
	0xe8, 0x91, 0x49, 0x78, 0x3a, 0xb9, 0x36, 0xb1, 0x31, 0xbb, 0xf5, 0x50, 0xbf, 0xfa, 0xbc, 0xe9,
	0x41, 0x82, 0x5d, 0xcf, 0xb2, 0x36, 0xf0, 0x28, 0x7f, 0x14, 0xd3, 0xca, 0xc3, 0x18, 0xdc, 0x87,
	0x95, 0x6a, 0x59, 0x94, 0xbe, 0x2a, 0x0b, 0x5a, 0xfb, 0x53, 0x41, 0x4b, 0xbe, 0x72, 0x07, 0x28,
	0x1c, 0x99, 0x2d, 0x13, 0x3b, 0xfd, 0x31, 0x7a, 0xdb, 0x42, 0xd3, 0x83, 0xd5, 0x4d, 0x5e, 0xe3,
	0x32, 0x30, 0x0c, 0x31, 0x6c, 0x22, 0xcc, 0xb0, 0x72, 0x4c, 0xa7, 0x5a, 0x4c, 0xa7, 0xa1, 0xc2,
	0xb5, 0x07, 0x28, 0x33, 0x22, 0x0c, 0x7a, 0xfd, 0x2d, 0xe9, 0xdd, 0xf4, 0xbb, 0x0e, 0x60, 0x01,
	0x15, 0x62, 0x8f, 0xd1, 0x66, 0x19, 0xcd, 0x36, 0x87, 0x91, 0xaf, 0x6d, 0x35, 0x6c, 0xac, 0x7e,
	0x83, 0x32, 0x11, 0x0f, 0x73, 0x83, 0xb7, 0x70, 0x07, 0x6e, 0x6f, 0x87, 0xef, 0x8f, 0x3c, 0xcf,
	0x75, 0x37, 0xc1, 0xcd, 0x6e, 0xc1, 0x00, 0x22, 0xad, 0xe0, 0xdd, 0x82, 0xc1, 0x79, 0x80, 0x65,
	0x68, 0x76, 0x4a, 0x68, 0x76, 0x5b, 0xff, 0x4d, 0xa2, 0x89, 0x2a, 0x27, 0x6a, 0x1d, 0xa5, 0x86,
	0x30, 0xe7, 0x46, 0x69, 0x1e, 0x8e, 0x99, 0x5d, 0x7f, 0xbd, 0x3e, 0xc8, 0x59, 0x47, 0xa9, 0xe1,
	0x2b, 0x1d, 0x1d, 0x34, 0xd0, 0xc7, 0x04, 0x1d, 0xb9, 0xce, 0xd5, 0x36, 0x5a, 0x1c, 0xf9, 0x60,
	0x7b, 0x27, 0xd2, 0xf7, 0xaa, 0x59, 0xb6, 0xf0, 0x46, 0x66, 0x41, 0xa6, 0x06, 0x9a, 0x7f, 0xf5,
	0x06, 0xd1, 0xe2, 0xfc, 0x87, 0x36, 0xd9, 0xcd, 0xeb, 0x6d, 0x82, 0x04, 0x4d, 0xb4, 0x70, 0x65,
	0x8f, 0x1f, 0xc5, 0x79, 0x87, 0x8c, 0xb2, 0xef, 0xbe, 0x81, 0x51, 0x90, 0xe3, 0x7b, 0x05, 0x65,
	0xe2, 0x9f, 0x3e, 0x3d, 0x2e, 0x54, 0xb4, 0x7d, 0xf6, 0xc3, 0x9b, 0xd9, 0x0f, 0xaa, 0xc8, 0xde,
	0xf9, 0xd6, 0xe5, 0xfa, 0xce, 0xe7, 0xa7, 0xe7, 0x39, 0xe5, 0xc5, 0x79, 0x4e, 0xf9, 0xe7, 0x3c,
	0xa7, 0xfc, 0x74, 0x91, 0x4b, 0xbc, 0xb8, 0xc8, 0x25, 0xfe, 0xba, 0xc8, 0x25, 0xbe, 0x78, 0x12,
	0x5a, 0x20, 0x2e, 0x1c, 0x77, 0x15, 0x3a, 0xac, 0x07, 0x85, 0x1e, 0x50, 0xd1, 0x75, 0x80, 0x17,
	0x47, 0x58, 0x7f, 0xec, 0x7d, 0xf1, 0x7b, 0xab, 0xd5, 0x9c, 0xf2, 0xbe, 0xe7, 0xdf, 0xff, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x01, 0x7c, 0x9f, 0x7c, 0x99, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create the IGP, optionally providing a beneficiary.
	CreateIgp(ctx context.Context, in *MsgCreateIgp, opts ...grpc.CallOption) (*MsgCreateIgpResponse, error)
	// Deposits a payment for the relaying of a message to its destination chain.
	PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error)
	// Sets the gas oracle data for a specific remote domain
	SetRemoteGasData(ctx context.Context, in *MsgSetRemoteGasData, opts ...grpc.CallOption) (*MsgSetRemoteGasDataResponse, error)
	// Sets the gas oracles for remote domains specified in the config array.
	SetGasOracles(ctx context.Context, in *MsgSetGasOracles, opts ...grpc.CallOption) (*MsgSetGasOraclesResponse, error)
	// Sets the beneficiary.
	SetBeneficiary(ctx context.Context, in *MsgSetBeneficiary, opts ...grpc.CallOption) (*MsgSetBeneficiaryResponse, error)
	// Sets the overhead gas for the destination domain. This is in the
	// destination gas denom and will be added to the required payForGas payment.
	SetDestinationGasOverhead(ctx context.Context, in *MsgSetDestinationGasOverhead, opts ...grpc.CallOption) (*MsgSetDestinationGasOverheadResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIgp(ctx context.Context, in *MsgCreateIgp, opts ...grpc.CallOption) (*MsgCreateIgpResponse, error) {
	out := new(MsgCreateIgpResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/CreateIgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error) {
	out := new(MsgPayForGasResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/PayForGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRemoteGasData(ctx context.Context, in *MsgSetRemoteGasData, opts ...grpc.CallOption) (*MsgSetRemoteGasDataResponse, error) {
	out := new(MsgSetRemoteGasDataResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetRemoteGasData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetGasOracles(ctx context.Context, in *MsgSetGasOracles, opts ...grpc.CallOption) (*MsgSetGasOraclesResponse, error) {
	out := new(MsgSetGasOraclesResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetGasOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBeneficiary(ctx context.Context, in *MsgSetBeneficiary, opts ...grpc.CallOption) (*MsgSetBeneficiaryResponse, error) {
	out := new(MsgSetBeneficiaryResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetBeneficiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDestinationGasOverhead(ctx context.Context, in *MsgSetDestinationGasOverhead, opts ...grpc.CallOption) (*MsgSetDestinationGasOverheadResponse, error) {
	out := new(MsgSetDestinationGasOverheadResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.igp.v1.Msg/SetDestinationGasOverhead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create the IGP, optionally providing a beneficiary.
	CreateIgp(context.Context, *MsgCreateIgp) (*MsgCreateIgpResponse, error)
	// Deposits a payment for the relaying of a message to its destination chain.
	PayForGas(context.Context, *MsgPayForGas) (*MsgPayForGasResponse, error)
	// Sets the gas oracle data for a specific remote domain
	SetRemoteGasData(context.Context, *MsgSetRemoteGasData) (*MsgSetRemoteGasDataResponse, error)
	// Sets the gas oracles for remote domains specified in the config array.
	SetGasOracles(context.Context, *MsgSetGasOracles) (*MsgSetGasOraclesResponse, error)
	// Sets the beneficiary.
	SetBeneficiary(context.Context, *MsgSetBeneficiary) (*MsgSetBeneficiaryResponse, error)
	// Sets the overhead gas for the destination domain. This is in the
	// destination gas denom and will be added to the required payForGas payment.
	SetDestinationGasOverhead(context.Context, *MsgSetDestinationGasOverhead) (*MsgSetDestinationGasOverheadResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct{}

func (*UnimplementedMsgServer) CreateIgp(ctx context.Context, req *MsgCreateIgp) (*MsgCreateIgpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIgp not implemented")
}

func (*UnimplementedMsgServer) PayForGas(ctx context.Context, req *MsgPayForGas) (*MsgPayForGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForGas not implemented")
}

func (*UnimplementedMsgServer) SetRemoteGasData(ctx context.Context, req *MsgSetRemoteGasData) (*MsgSetRemoteGasDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemoteGasData not implemented")
}

func (*UnimplementedMsgServer) SetGasOracles(ctx context.Context, req *MsgSetGasOracles) (*MsgSetGasOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGasOracles not implemented")
}

func (*UnimplementedMsgServer) SetBeneficiary(ctx context.Context, req *MsgSetBeneficiary) (*MsgSetBeneficiaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeneficiary not implemented")
}

func (*UnimplementedMsgServer) SetDestinationGasOverhead(ctx context.Context, req *MsgSetDestinationGasOverhead) (*MsgSetDestinationGasOverheadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDestinationGasOverhead not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIgp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/CreateIgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIgp(ctx, req.(*MsgCreateIgp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayForGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/PayForGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForGas(ctx, req.(*MsgPayForGas))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRemoteGasData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRemoteGasData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRemoteGasData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetRemoteGasData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRemoteGasData(ctx, req.(*MsgSetRemoteGasData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetGasOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetGasOracles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetGasOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetGasOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetGasOracles(ctx, req.(*MsgSetGasOracles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBeneficiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBeneficiary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBeneficiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetBeneficiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBeneficiary(ctx, req.(*MsgSetBeneficiary))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDestinationGasOverhead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDestinationGasOverhead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDestinationGasOverhead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.igp.v1.Msg/SetDestinationGasOverhead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDestinationGasOverhead(ctx, req.(*MsgSetDestinationGasOverhead))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.igp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIgp",
			Handler:    _Msg_CreateIgp_Handler,
		},
		{
			MethodName: "PayForGas",
			Handler:    _Msg_PayForGas_Handler,
		},
		{
			MethodName: "SetRemoteGasData",
			Handler:    _Msg_SetRemoteGasData_Handler,
		},
		{
			MethodName: "SetGasOracles",
			Handler:    _Msg_SetGasOracles_Handler,
		},
		{
			MethodName: "SetBeneficiary",
			Handler:    _Msg_SetBeneficiary_Handler,
		},
		{
			MethodName: "SetDestinationGasOverhead",
			Handler:    _Msg_SetDestinationGasOverhead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/igp/v1/tx.proto",
}

func (m *MsgSetRemoteGasData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRemoteGasData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRemoteGasData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GasPrice.Size()
		i -= size
		if _, err := m.GasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenExchangeRate.Size()
		i -= size
		if _, err := m.TokenExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RemoteDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x18
	}
	if m.IgpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRemoteGasDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRemoteGasDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRemoteGasDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPayForGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RelayerAddress) > 0 {
		i -= len(m.RelayerAddress)
		copy(dAtA[i:], m.RelayerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.MaximumPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.GasAmount.Size()
		i -= size
		if _, err := m.GasAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetDestinationGasOverhead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDestinationGasOverhead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDestinationGasOverhead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.GasOverhead.Size()
		i -= size
		if _, err := m.GasOverhead.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDestinationGasOverheadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDestinationGasOverheadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDestinationGasOverheadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetGasOracles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGasOracles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGasOracles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetGasOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGasOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGasOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetBeneficiary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBeneficiary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBeneficiary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBeneficiaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBeneficiaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBeneficiaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateIgp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIgp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIgp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenExchangeRateScale.Size()
		i -= size
		if _, err := m.TokenExchangeRateScale.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIgpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIgpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIgpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IgpId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgSetRemoteGasData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IgpId != 0 {
		n += 1 + sovTx(uint64(m.IgpId))
	}
	if m.RemoteDomain != 0 {
		n += 1 + sovTx(uint64(m.RemoteDomain))
	}
	l = m.TokenExchangeRate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.GasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetRemoteGasDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPayForGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = m.GasAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaximumPayment.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IgpId != 0 {
		n += 1 + sovTx(uint64(m.IgpId))
	}
	return n
}

func (m *MsgPayForGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetDestinationGasOverhead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = m.GasOverhead.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.IgpId != 0 {
		n += 1 + sovTx(uint64(m.IgpId))
	}
	return n
}

func (m *MsgSetDestinationGasOverheadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetGasOracles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetGasOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetBeneficiary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IgpId != 0 {
		n += 1 + sovTx(uint64(m.IgpId))
	}
	return n
}

func (m *MsgSetBeneficiaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateIgp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TokenExchangeRateScale.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateIgpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IgpId != 0 {
		n += 1 + sovTx(uint64(m.IgpId))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgSetRemoteGasData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRemoteGasData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRemoteGasData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetRemoteGasDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRemoteGasDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRemoteGasDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgPayForGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgPayForGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetDestinationGasOverhead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDestinationGasOverhead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDestinationGasOverhead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasOverhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasOverhead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetDestinationGasOverheadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDestinationGasOverheadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDestinationGasOverheadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetGasOracles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGasOracles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGasOracles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &GasOracleConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetGasOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGasOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGasOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetBeneficiary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBeneficiary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBeneficiary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetBeneficiaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBeneficiaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBeneficiaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCreateIgp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIgp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIgp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExchangeRateScale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenExchangeRateScale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCreateIgpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIgpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIgpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
