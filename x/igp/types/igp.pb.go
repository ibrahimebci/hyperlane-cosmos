// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/igp/v1/igp.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Hyperlane's IGP. An IGP instance always has one relayer beneficiary.
// Each IGP has gas oracles, one oracle for each destination it serves.
// The gas oracle is a cosmos address that is allowed to update gas prices.
type Igp struct {
	// Only the owner can update the IGP.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// An owner can own multiple IGPs. This ID is globally unique.
	IgpId uint32 `protobuf:"varint,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	// If a beneficiary is set, it will be paid relayer costs instead of the
	// owner.
	Beneficiary            string                                 `protobuf:"bytes,3,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	TokenExchangeRateScale github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_exchange_rate_scale,json=tokenExchangeRateScale,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_exchange_rate_scale"`
	// Key is the remote domain of the gas oracle
	Oracles map[uint32]*GasOracle `protobuf:"bytes,5,rep,name=oracles,proto3" json:"oracles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Igp) Reset()         { *m = Igp{} }
func (m *Igp) String() string { return proto.CompactTextString(m) }
func (*Igp) ProtoMessage()    {}
func (*Igp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f39077f3978ad7ca, []int{0}
}

func (m *Igp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Igp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Igp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Igp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Igp.Merge(m, src)
}

func (m *Igp) XXX_Size() int {
	return m.Size()
}

func (m *Igp) XXX_DiscardUnknown() {
	xxx_messageInfo_Igp.DiscardUnknown(m)
}

var xxx_messageInfo_Igp proto.InternalMessageInfo

func (m *Igp) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Igp) GetIgpId() uint32 {
	if m != nil {
		return m.IgpId
	}
	return 0
}

func (m *Igp) GetBeneficiary() string {
	if m != nil {
		return m.Beneficiary
	}
	return ""
}

func (m *Igp) GetOracles() map[uint32]*GasOracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func init() {
	proto.RegisterType((*Igp)(nil), "hyperlane.igp.v1.Igp")
	proto.RegisterMapType((map[uint32]*GasOracle)(nil), "hyperlane.igp.v1.Igp.OraclesEntry")
}

func init() { proto.RegisterFile("hyperlane/igp/v1/igp.proto", fileDescriptor_f39077f3978ad7ca) }

var fileDescriptor_f39077f3978ad7ca = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xde, 0x34, 0x6e, 0xc5, 0x59, 0x0b, 0x35, 0x54, 0x49, 0xa3, 0xa4, 0x4b, 0x0f, 0xb2, 0x08,
	0x49, 0xd8, 0x7a, 0x91, 0xd2, 0x4b, 0x0b, 0x45, 0x72, 0x12, 0x52, 0x50, 0xf0, 0x12, 0x66, 0x93,
	0xe7, 0xec, 0xb0, 0xd9, 0x99, 0x30, 0x33, 0x1b, 0x1b, 0xf0, 0x47, 0xf8, 0x07, 0xbc, 0x7b, 0xf4,
	0xd0, 0x1f, 0xd1, 0x63, 0xe9, 0x49, 0x3c, 0x14, 0xd9, 0x3d, 0xf8, 0x37, 0x24, 0x33, 0xd3, 0xb2,
	0xd8, 0x83, 0x97, 0xbc, 0x97, 0xf7, 0x7d, 0xef, 0xfb, 0xc8, 0xf7, 0x82, 0x82, 0x69, 0x5b, 0x83,
	0xa8, 0x30, 0x83, 0x84, 0x92, 0x3a, 0x69, 0xc6, 0x5d, 0x89, 0x6b, 0xc1, 0x15, 0xf7, 0xb6, 0xef,
	0xb0, 0xb8, 0x1b, 0x36, 0xe3, 0x60, 0xb7, 0xe0, 0x72, 0xce, 0x65, 0xae, 0xf1, 0xc4, 0xbc, 0x18,
	0x72, 0xf0, 0xe2, 0x9e, 0x90, 0x6a, 0x6b, 0xb8, 0x45, 0x77, 0x08, 0x27, 0xdc, 0x6c, 0x75, 0x9d,
	0x9d, 0x3e, 0xc1, 0x73, 0xca, 0x78, 0xa2, 0x9f, 0x66, 0xb4, 0xff, 0xcd, 0x45, 0x6e, 0x4a, 0x6a,
	0x2f, 0x46, 0x7d, 0xfe, 0x99, 0x81, 0xf0, 0x9d, 0xa1, 0x33, 0x7a, 0x74, 0xe2, 0x5f, 0x5f, 0x44,
	0x3b, 0xd6, 0xef, 0xb8, 0x2c, 0x05, 0x48, 0x79, 0xa6, 0x04, 0x65, 0x24, 0x33, 0x34, 0xef, 0x29,
	0xda, 0xa4, 0xa4, 0xce, 0x69, 0xe9, 0x6f, 0x0c, 0x9d, 0xd1, 0x56, 0xd6, 0xa7, 0xa4, 0x4e, 0x4b,
	0xef, 0x10, 0x0d, 0x26, 0xc0, 0xe0, 0x13, 0x2d, 0x28, 0x16, 0xad, 0xef, 0xfe, 0x47, 0x6c, 0x9d,
	0xec, 0x7d, 0x41, 0xbb, 0x8a, 0xcf, 0x80, 0xe5, 0x70, 0x5e, 0x4c, 0x31, 0x23, 0x90, 0x0b, 0xac,
	0x20, 0x97, 0x05, 0xae, 0xc0, 0x7f, 0xa0, 0x95, 0x8e, 0x2f, 0x6f, 0xf6, 0x7a, 0xbf, 0x6e, 0xf6,
	0x5e, 0x12, 0xaa, 0xa6, 0x8b, 0x49, 0x5c, 0xf0, 0xb9, 0x4d, 0xc5, 0x96, 0x48, 0x96, 0x33, 0x1b,
	0x44, 0xca, 0xd4, 0xf5, 0x45, 0x84, 0xac, 0x6f, 0xca, 0xd4, 0xf7, 0x3f, 0x3f, 0x5e, 0x39, 0xd9,
	0x33, 0xed, 0x71, 0x6a, 0x2d, 0x32, 0xac, 0xe0, 0xac, 0x33, 0xf0, 0x8e, 0xd0, 0x43, 0x2e, 0x70,
	0x51, 0x81, 0xf4, 0xfb, 0x43, 0x77, 0x34, 0x38, 0xd8, 0x8f, 0xff, 0x3d, 0x47, 0x9c, 0x92, 0x3a,
	0x7e, 0x67, 0x48, 0xa7, 0x4c, 0x89, 0x36, 0xbb, 0x5d, 0x09, 0x3e, 0xa0, 0xc7, 0xeb, 0x80, 0xb7,
	0x8d, 0xdc, 0x19, 0xb4, 0x3a, 0xcc, 0xad, 0xac, 0x6b, 0xbd, 0x31, 0xea, 0x37, 0xb8, 0x5a, 0x80,
	0xce, 0x6b, 0x70, 0xf0, 0xfc, 0xbe, 0xfa, 0x5b, 0x2c, 0x8d, 0x46, 0x66, 0x98, 0x87, 0x1b, 0x6f,
	0x9c, 0x93, 0xf7, 0x97, 0xcb, 0xd0, 0xb9, 0x5a, 0x86, 0xce, 0xef, 0x65, 0xe8, 0x7c, 0x5d, 0x85,
	0xbd, 0xab, 0x55, 0xd8, 0xfb, 0xb9, 0x0a, 0x7b, 0x1f, 0x8f, 0xd6, 0x32, 0x90, 0x4a, 0x74, 0x5f,
	0x53, 0xf1, 0x06, 0xa2, 0x06, 0x98, 0x5a, 0x08, 0x90, 0xc9, 0x9d, 0x41, 0x64, 0x23, 0x3a, 0xd7,
	0x7f, 0x8a, 0x4e, 0x67, 0xb2, 0xa9, 0xcf, 0xff, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0x64, 0x14, 0xdd, 0x90, 0x02, 0x00, 0x00,
}

func (m *Igp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Igp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Igp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for k := range m.Oracles {
			v := m.Oracles[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintIgp(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintIgp(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintIgp(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.TokenExchangeRateScale.Size()
		i -= size
		if _, err := m.TokenExchangeRateScale.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIgp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintIgp(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IgpId != 0 {
		i = encodeVarintIgp(dAtA, i, uint64(m.IgpId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintIgp(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIgp(dAtA []byte, offset int, v uint64) int {
	offset -= sovIgp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Igp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovIgp(uint64(l))
	}
	if m.IgpId != 0 {
		n += 1 + sovIgp(uint64(m.IgpId))
	}
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovIgp(uint64(l))
	}
	l = m.TokenExchangeRateScale.Size()
	n += 1 + l + sovIgp(uint64(l))
	if len(m.Oracles) > 0 {
		for k, v := range m.Oracles {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovIgp(uint64(l))
			}
			mapEntrySize := 1 + sovIgp(uint64(k)) + l
			n += mapEntrySize + 1 + sovIgp(uint64(mapEntrySize))
		}
	}
	return n
}

func sovIgp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozIgp(x uint64) (n int) {
	return sovIgp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Igp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIgp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Igp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Igp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIgp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIgp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			m.IgpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIgp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIgp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExchangeRateScale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIgp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIgp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenExchangeRateScale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIgp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIgp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oracles == nil {
				m.Oracles = make(map[uint32]*GasOracle)
			}
			var mapkey uint32
			var mapvalue *GasOracle
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIgp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIgp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIgp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthIgp
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthIgp
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GasOracle{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIgp(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthIgp
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Oracles[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIgp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIgp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipIgp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIgp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIgp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIgp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIgp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIgp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIgp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIgp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIgp = fmt.Errorf("proto: unexpected end of group")
)
