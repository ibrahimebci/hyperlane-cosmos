// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/ism/v1/message_id_multisig.proto

package message_id_multisig

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MessageIdMultiSig ISM for a specific origin
type MessageIdMultiSig struct {
	// Validator pub keys
	ValidatorPubKeys []string `protobuf:"bytes,1,rep,name=validator_pub_keys,json=validatorPubKeys,proto3" json:"validator_pub_keys,omitempty"`
	// number of validators required
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *MessageIdMultiSig) Reset()         { *m = MessageIdMultiSig{} }
func (m *MessageIdMultiSig) String() string { return proto.CompactTextString(m) }
func (*MessageIdMultiSig) ProtoMessage()    {}
func (*MessageIdMultiSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a663292f4f49ea2c, []int{0}
}

func (m *MessageIdMultiSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MessageIdMultiSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageIdMultiSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MessageIdMultiSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIdMultiSig.Merge(m, src)
}

func (m *MessageIdMultiSig) XXX_Size() int {
	return m.Size()
}

func (m *MessageIdMultiSig) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIdMultiSig.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIdMultiSig proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MessageIdMultiSig)(nil), "hyperlane.ism.v1.MessageIdMultiSig")
}

func init() {
	proto.RegisterFile("hyperlane/ism/v1/message_id_multisig.proto", fileDescriptor_a663292f4f49ea2c)
}

var fileDescriptor_a663292f4f49ea2c = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x13, 0x15, 0xa1, 0x01, 0xa1, 0x06, 0x0f, 0x45, 0x64, 0x2d, 0x9e, 0x8a, 0xd8, 0x2c,
	0xc5, 0x9b, 0x47, 0x6f, 0x22, 0x85, 0x52, 0x6f, 0x5e, 0x42, 0xd2, 0x0c, 0x9b, 0xd5, 0xdd, 0x4c,
	0xd8, 0xd9, 0x5d, 0xcc, 0x1b, 0x78, 0xf4, 0x11, 0x7c, 0x1c, 0x8f, 0x3d, 0x7a, 0x94, 0xe4, 0x45,
	0xa4, 0x29, 0xc4, 0x8b, 0xb7, 0x61, 0xfe, 0x9f, 0x0f, 0xbe, 0x3f, 0xba, 0x2e, 0x9b, 0x1a, 0x8c,
	0xca, 0x2a, 0xe0, 0x92, 0x34, 0xf7, 0x0b, 0xae, 0x81, 0x28, 0x13, 0x90, 0xca, 0x22, 0xd5, 0x4e,
	0x59, 0x49, 0x52, 0x24, 0xb5, 0x41, 0x8b, 0xf1, 0x78, 0xe8, 0x26, 0x92, 0x74, 0xe2, 0x17, 0xe7,
	0x67, 0x02, 0x05, 0xf6, 0x21, 0xdf, 0x5d, 0xfb, 0xde, 0x15, 0x44, 0xa7, 0xcb, 0x3d, 0xe4, 0xa1,
	0x58, 0xee, 0x10, 0x4f, 0x52, 0xc4, 0x37, 0x51, 0xec, 0x33, 0x25, 0x8b, 0xcc, 0xa2, 0x49, 0x6b,
	0x97, 0xa7, 0xaf, 0xd0, 0xd0, 0x24, 0x9c, 0x1e, 0xce, 0x46, 0xeb, 0xf1, 0x90, 0xac, 0x5c, 0xfe,
	0x08, 0x0d, 0xc5, 0x17, 0xd1, 0xc8, 0x96, 0x06, 0xa8, 0x44, 0x55, 0x4c, 0x0e, 0xa6, 0xe1, 0xec,
	0x64, 0xfd, 0xf7, 0xb8, 0x3b, 0x7a, 0xff, 0xbc, 0x0c, 0xee, 0x5f, 0xbe, 0x5a, 0x16, 0x6e, 0x5b,
	0x16, 0xfe, 0xb4, 0x2c, 0xfc, 0xe8, 0x58, 0xb0, 0xed, 0x58, 0xf0, 0xdd, 0xb1, 0xe0, 0x79, 0x25,
	0xa4, 0x2d, 0x5d, 0x9e, 0x6c, 0x50, 0x73, 0xb2, 0x26, 0xab, 0x04, 0x28, 0xf4, 0x30, 0xf7, 0x50,
	0x59, 0x67, 0x80, 0xf8, 0x20, 0x32, 0xdf, 0x20, 0x69, 0x24, 0xfe, 0xd6, 0xdb, 0xdb, 0xa6, 0x06,
	0xfa, 0x6f, 0x80, 0xfc, 0xb8, 0x37, 0xbb, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xb9, 0x23,
	0xdf, 0x2f, 0x01, 0x00, 0x00,
}

func (m *MessageIdMultiSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageIdMultiSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageIdMultiSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintMessageIdMultisig(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorPubKeys) > 0 {
		for iNdEx := len(m.ValidatorPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorPubKeys[iNdEx])
			copy(dAtA[i:], m.ValidatorPubKeys[iNdEx])
			i = encodeVarintMessageIdMultisig(dAtA, i, uint64(len(m.ValidatorPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageIdMultisig(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageIdMultisig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MessageIdMultiSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorPubKeys) > 0 {
		for _, s := range m.ValidatorPubKeys {
			l = len(s)
			n += 1 + l + sovMessageIdMultisig(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovMessageIdMultisig(uint64(m.Threshold))
	}
	return n
}

func sovMessageIdMultisig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozMessageIdMultisig(x uint64) (n int) {
	return sovMessageIdMultisig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MessageIdMultiSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageIdMultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageIdMultiSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageIdMultiSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageIdMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageIdMultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageIdMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubKeys = append(m.ValidatorPubKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageIdMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageIdMultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageIdMultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipMessageIdMultisig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageIdMultisig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageIdMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageIdMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageIdMultisig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageIdMultisig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageIdMultisig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageIdMultisig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageIdMultisig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageIdMultisig = fmt.Errorf("proto: unexpected end of group")
)
