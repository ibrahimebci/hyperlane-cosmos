// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/ism/v1/multisig.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Hyperlane's default ISM
type OriginsMultiSigIsm struct {
	Origin uint32       `protobuf:"varint,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Ism    *MultiSigIsm `protobuf:"bytes,2,opt,name=ism,proto3" json:"ism,omitempty"`
}

func (m *OriginsMultiSigIsm) Reset()         { *m = OriginsMultiSigIsm{} }
func (m *OriginsMultiSigIsm) String() string { return proto.CompactTextString(m) }
func (*OriginsMultiSigIsm) ProtoMessage()    {}
func (*OriginsMultiSigIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_4deb152f7d2f5a11, []int{0}
}

func (m *OriginsMultiSigIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *OriginsMultiSigIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OriginsMultiSigIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *OriginsMultiSigIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginsMultiSigIsm.Merge(m, src)
}

func (m *OriginsMultiSigIsm) XXX_Size() int {
	return m.Size()
}

func (m *OriginsMultiSigIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginsMultiSigIsm.DiscardUnknown(m)
}

var xxx_messageInfo_OriginsMultiSigIsm proto.InternalMessageInfo

func (m *OriginsMultiSigIsm) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *OriginsMultiSigIsm) GetIsm() *MultiSigIsm {
	if m != nil {
		return m.Ism
	}
	return nil
}

// MultiSig ISM for a specific origin
type MultiSigIsm struct {
	// Validator pub keys
	ValidatorPubKeys []string `protobuf:"bytes,1,rep,name=validator_pub_keys,json=validatorPubKeys,proto3" json:"validator_pub_keys,omitempty"`
	// number of validators required
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *MultiSigIsm) Reset()         { *m = MultiSigIsm{} }
func (m *MultiSigIsm) String() string { return proto.CompactTextString(m) }
func (*MultiSigIsm) ProtoMessage()    {}
func (*MultiSigIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_4deb152f7d2f5a11, []int{1}
}

func (m *MultiSigIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MultiSigIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiSigIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MultiSigIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSigIsm.Merge(m, src)
}

func (m *MultiSigIsm) XXX_Size() int {
	return m.Size()
}

func (m *MultiSigIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSigIsm.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSigIsm proto.InternalMessageInfo

func (m *MultiSigIsm) GetValidatorPubKeys() []string {
	if m != nil {
		return m.ValidatorPubKeys
	}
	return nil
}

func (m *MultiSigIsm) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	proto.RegisterType((*OriginsMultiSigIsm)(nil), "hyperlane.ism.v1.OriginsMultiSigIsm")
	proto.RegisterType((*MultiSigIsm)(nil), "hyperlane.ism.v1.MultiSigIsm")
}

func init() { proto.RegisterFile("hyperlane/ism/v1/multisig.proto", fileDescriptor_4deb152f7d2f5a11) }

var fileDescriptor_4deb152f7d2f5a11 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x16, 0x0a, 0xdd, 0x52, 0x28, 0x7b, 0x90, 0x1c, 0x74, 0x0d, 0x3d, 0xe5, 0x60,
	0x77, 0xa9, 0x5e, 0x3d, 0x79, 0x13, 0x11, 0x25, 0x82, 0xa0, 0x20, 0x25, 0x69, 0x97, 0x64, 0x30,
	0x9b, 0x0d, 0x3b, 0x9b, 0x60, 0xde, 0xc2, 0xc7, 0xf2, 0xd8, 0xa3, 0x47, 0x49, 0x5e, 0x44, 0x1a,
	0x24, 0x16, 0x8f, 0xf3, 0xcf, 0xc7, 0x37, 0xc3, 0x4f, 0xcf, 0xb2, 0xa6, 0x54, 0x36, 0x8f, 0x0b,
	0x25, 0x01, 0xb5, 0xac, 0x57, 0x52, 0x57, 0xb9, 0x03, 0x84, 0x54, 0x94, 0xd6, 0x38, 0xc3, 0xe6,
	0x03, 0x20, 0x00, 0xb5, 0xa8, 0x57, 0x8b, 0x57, 0xca, 0xee, 0x2d, 0xa4, 0x50, 0xe0, 0xdd, 0x1e,
	0x7d, 0x84, 0xf4, 0x06, 0x35, 0x3b, 0xa6, 0x63, 0xd3, 0xa7, 0x3e, 0x09, 0x48, 0x38, 0x8b, 0x7e,
	0x27, 0x26, 0xe9, 0x08, 0x50, 0xfb, 0x47, 0x01, 0x09, 0xa7, 0x17, 0xa7, 0xe2, 0xbf, 0x4d, 0x1c,
	0x38, 0xa2, 0x3d, 0xb9, 0x78, 0xa6, 0xd3, 0x43, 0xef, 0x39, 0x65, 0x75, 0x9c, 0xc3, 0x36, 0x76,
	0xc6, 0xae, 0xcb, 0x2a, 0x59, 0xbf, 0xa9, 0x06, 0x7d, 0x12, 0x8c, 0xc2, 0x49, 0x34, 0x1f, 0x36,
	0x0f, 0x55, 0x72, 0xab, 0x1a, 0x64, 0x27, 0x74, 0xe2, 0x32, 0xab, 0x30, 0x33, 0xf9, 0xb6, 0xbf,
	0x39, 0x8b, 0xfe, 0x82, 0xeb, 0xa7, 0xcf, 0x96, 0x93, 0x5d, 0xcb, 0xc9, 0x77, 0xcb, 0xc9, 0x47,
	0xc7, 0xbd, 0x5d, 0xc7, 0xbd, 0xaf, 0x8e, 0x7b, 0x2f, 0x57, 0x29, 0xb8, 0xac, 0x4a, 0xc4, 0xc6,
	0x68, 0x89, 0xce, 0xc6, 0x45, 0xaa, 0x72, 0x53, 0xab, 0x65, 0xad, 0x0a, 0x57, 0x59, 0x85, 0x72,
	0xf8, 0x7b, 0xb9, 0x31, 0xa8, 0x0d, 0xca, 0xf7, 0xbe, 0x2f, 0xd7, 0x94, 0x0a, 0x93, 0x71, 0x5f,
	0xd5, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x07, 0x32, 0x9d, 0x4d, 0x01, 0x00, 0x00,
}

func (m *OriginsMultiSigIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginsMultiSigIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginsMultiSigIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ism != nil {
		{
			size, err := m.Ism.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultisig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Origin != 0 {
		i = encodeVarintMultisig(dAtA, i, uint64(m.Origin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiSigIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSigIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiSigIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintMultisig(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorPubKeys) > 0 {
		for iNdEx := len(m.ValidatorPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorPubKeys[iNdEx])
			copy(dAtA[i:], m.ValidatorPubKeys[iNdEx])
			i = encodeVarintMultisig(dAtA, i, uint64(len(m.ValidatorPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultisig(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultisig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *OriginsMultiSigIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != 0 {
		n += 1 + sovMultisig(uint64(m.Origin))
	}
	if m.Ism != nil {
		l = m.Ism.Size()
		n += 1 + l + sovMultisig(uint64(l))
	}
	return n
}

func (m *MultiSigIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorPubKeys) > 0 {
		for _, s := range m.ValidatorPubKeys {
			l = len(s)
			n += 1 + l + sovMultisig(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovMultisig(uint64(m.Threshold))
	}
	return n
}

func sovMultisig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozMultisig(x uint64) (n int) {
	return sovMultisig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *OriginsMultiSigIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginsMultiSigIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginsMultiSigIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ism", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ism == nil {
				m.Ism = &MultiSigIsm{}
			}
			if err := m.Ism.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MultiSigIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSigIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSigIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubKeys = append(m.ValidatorPubKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipMultisig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultisig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultisig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultisig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultisig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultisig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultisig = fmt.Errorf("proto: unexpected end of group")
)
