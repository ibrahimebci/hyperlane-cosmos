// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/ism/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDefaultIsmRequest is the request type for the DefaultIsm RPC method.
type QueryDefaultIsmRequest struct{}

func (m *QueryDefaultIsmRequest) Reset()         { *m = QueryDefaultIsmRequest{} }
func (m *QueryDefaultIsmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDefaultIsmRequest) ProtoMessage()    {}
func (*QueryDefaultIsmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfd752fcec82ce5, []int{0}
}

func (m *QueryDefaultIsmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryDefaultIsmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDefaultIsmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryDefaultIsmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDefaultIsmRequest.Merge(m, src)
}

func (m *QueryDefaultIsmRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryDefaultIsmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDefaultIsmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDefaultIsmRequest proto.InternalMessageInfo

// QueryDefaultIsmResponse is the response type for the DefaultIsm RPC method.
type QueryDefaultIsmResponse struct {
	ValidatorPubKeys [][]byte `protobuf:"bytes,1,rep,name=validator_pub_keys,json=validatorPubKeys,proto3" json:"validator_pub_keys,omitempty"`
	Threshold        uint32   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *QueryDefaultIsmResponse) Reset()         { *m = QueryDefaultIsmResponse{} }
func (m *QueryDefaultIsmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDefaultIsmResponse) ProtoMessage()    {}
func (*QueryDefaultIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfd752fcec82ce5, []int{1}
}

func (m *QueryDefaultIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryDefaultIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDefaultIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryDefaultIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDefaultIsmResponse.Merge(m, src)
}

func (m *QueryDefaultIsmResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryDefaultIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDefaultIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDefaultIsmResponse proto.InternalMessageInfo

func (m *QueryDefaultIsmResponse) GetValidatorPubKeys() [][]byte {
	if m != nil {
		return m.ValidatorPubKeys
	}
	return nil
}

func (m *QueryDefaultIsmResponse) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

// QueryContractIsmRequest is the request type for the ContractIsm RPC method.
type QueryContractIsmRequest struct {
	ContractAddr []byte `protobuf:"bytes,1,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
}

func (m *QueryContractIsmRequest) Reset()         { *m = QueryContractIsmRequest{} }
func (m *QueryContractIsmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractIsmRequest) ProtoMessage()    {}
func (*QueryContractIsmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfd752fcec82ce5, []int{2}
}

func (m *QueryContractIsmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryContractIsmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractIsmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryContractIsmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractIsmRequest.Merge(m, src)
}

func (m *QueryContractIsmRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryContractIsmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractIsmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractIsmRequest proto.InternalMessageInfo

func (m *QueryContractIsmRequest) GetContractAddr() []byte {
	if m != nil {
		return m.ContractAddr
	}
	return nil
}

// QueryContractIsmResponse is the response type for the ContractIsm RPC method.
type QueryContractIsmResponse struct {
	ValidatorPubKeys [][]byte `protobuf:"bytes,1,rep,name=validator_pub_keys,json=validatorPubKeys,proto3" json:"validator_pub_keys,omitempty"`
	Threshold        uint32   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *QueryContractIsmResponse) Reset()         { *m = QueryContractIsmResponse{} }
func (m *QueryContractIsmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractIsmResponse) ProtoMessage()    {}
func (*QueryContractIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dfd752fcec82ce5, []int{3}
}

func (m *QueryContractIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryContractIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryContractIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractIsmResponse.Merge(m, src)
}

func (m *QueryContractIsmResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryContractIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractIsmResponse proto.InternalMessageInfo

func (m *QueryContractIsmResponse) GetValidatorPubKeys() [][]byte {
	if m != nil {
		return m.ValidatorPubKeys
	}
	return nil
}

func (m *QueryContractIsmResponse) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryDefaultIsmRequest)(nil), "hyperlane.ism.v1.QueryDefaultIsmRequest")
	proto.RegisterType((*QueryDefaultIsmResponse)(nil), "hyperlane.ism.v1.QueryDefaultIsmResponse")
	proto.RegisterType((*QueryContractIsmRequest)(nil), "hyperlane.ism.v1.QueryContractIsmRequest")
	proto.RegisterType((*QueryContractIsmResponse)(nil), "hyperlane.ism.v1.QueryContractIsmResponse")
}

func init() { proto.RegisterFile("hyperlane/ism/v1/query.proto", fileDescriptor_4dfd752fcec82ce5) }

var fileDescriptor_4dfd752fcec82ce5 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x3f, 0xab, 0xd4, 0x40,
	0x14, 0xc5, 0x77, 0x56, 0x14, 0x1c, 0xf7, 0xc1, 0x63, 0x0a, 0x0d, 0xcb, 0x1a, 0x43, 0x44, 0x89,
	0xe2, 0xcb, 0xf0, 0xb4, 0x15, 0xc1, 0x3f, 0x8d, 0xd8, 0x68, 0x0a, 0x0b, 0x9b, 0x30, 0x49, 0xee,
	0x4b, 0x06, 0x93, 0x99, 0xec, 0xdc, 0x49, 0x30, 0xad, 0x95, 0x85, 0x85, 0xe0, 0x27, 0xf0, 0xdb,
	0x58, 0x2e, 0xd8, 0x58, 0xca, 0xae, 0x1f, 0x44, 0xcc, 0xae, 0xbb, 0x8b, 0x51, 0xd8, 0xe2, 0xb5,
	0xf7, 0x9c, 0x9b, 0xf3, 0xcb, 0xb9, 0x43, 0x67, 0x45, 0x57, 0x83, 0x29, 0x85, 0x02, 0x2e, 0xb1,
	0xe2, 0xed, 0x29, 0x9f, 0x37, 0x60, 0xba, 0xb0, 0x36, 0xda, 0x6a, 0x76, 0xbc, 0x55, 0x43, 0x89,
	0x55, 0xd8, 0x9e, 0x4e, 0x67, 0xb9, 0xd6, 0x79, 0x09, 0x5c, 0xd4, 0x92, 0x0b, 0xa5, 0xb4, 0x15,
	0x56, 0x6a, 0x85, 0x6b, 0xbf, 0xef, 0xd0, 0xab, 0xaf, 0x7e, 0xaf, 0x3f, 0x83, 0x33, 0xd1, 0x94,
	0xf6, 0x39, 0x56, 0x11, 0xcc, 0x1b, 0x40, 0xeb, 0x03, 0xbd, 0x36, 0x50, 0xb0, 0xd6, 0x0a, 0x81,
	0xdd, 0xa3, 0xac, 0x15, 0xa5, 0xcc, 0x84, 0xd5, 0x26, 0xae, 0x9b, 0x24, 0x7e, 0x0b, 0x1d, 0x3a,
	0xc4, 0xbb, 0x10, 0x4c, 0xa2, 0xe3, 0xad, 0xf2, 0xb2, 0x49, 0x5e, 0x40, 0x87, 0x6c, 0x46, 0x2f,
	0xdb, 0xc2, 0x00, 0x16, 0xba, 0xcc, 0x9c, 0xb1, 0x47, 0x82, 0xa3, 0x68, 0x37, 0xf0, 0x1f, 0x6d,
	0x62, 0x9e, 0x6a, 0x65, 0x8d, 0x48, 0xf7, 0x08, 0xd8, 0x4d, 0x7a, 0x94, 0x6e, 0xa6, 0xb1, 0xc8,
	0x32, 0xe3, 0x10, 0x8f, 0x04, 0x93, 0x68, 0xf2, 0x67, 0xf8, 0x38, 0xcb, 0x8c, 0x7f, 0x46, 0x9d,
	0xe1, 0xfe, 0xf9, 0x73, 0xde, 0xff, 0x32, 0xa6, 0x17, 0xfb, 0x20, 0xf6, 0x81, 0x50, 0xba, 0x2b,
	0x85, 0x05, 0xe1, 0xdf, 0x95, 0x87, 0xff, 0x6e, 0x74, 0x7a, 0xe7, 0x00, 0xe7, 0x9a, 0xdc, 0xbf,
	0xf5, 0xfe, 0xdb, 0xcf, 0xcf, 0xe3, 0x1b, 0xec, 0x3a, 0x1f, 0x5c, 0x3b, 0x5b, 0xbb, 0x63, 0x89,
	0x15, 0xfb, 0x48, 0xe8, 0x95, 0xbd, 0x1f, 0x67, 0xff, 0x4b, 0x18, 0x96, 0x3b, 0xbd, 0x7b, 0x88,
	0x75, 0x43, 0x73, 0xbb, 0xa7, 0xf1, 0x98, 0x3b, 0xa4, 0xd9, 0x1e, 0x48, 0x62, 0xf5, 0xe4, 0xf5,
	0xd7, 0xa5, 0x4b, 0x16, 0x4b, 0x97, 0xfc, 0x58, 0xba, 0xe4, 0xd3, 0xca, 0x1d, 0x2d, 0x56, 0xee,
	0xe8, 0xfb, 0xca, 0x1d, 0xbd, 0x79, 0x98, 0x4b, 0x5b, 0x34, 0x49, 0x98, 0xea, 0x8a, 0xa3, 0x35,
	0x42, 0xe5, 0x50, 0xea, 0x16, 0x4e, 0x5a, 0x50, 0xb6, 0x31, 0x80, 0xbb, 0x0f, 0x9f, 0xa4, 0x1a,
	0x2b, 0x8d, 0xfc, 0x5d, 0x9f, 0x60, 0xbb, 0x1a, 0x30, 0xb9, 0xd4, 0xbf, 0xd5, 0x07, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x1e, 0xe1, 0x14, 0xfb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Get current default multisig ISM
	DefaultIsm(ctx context.Context, in *QueryDefaultIsmRequest, opts ...grpc.CallOption) (*QueryDefaultIsmResponse, error)
	// Get contract's ISM
	ContractIsm(ctx context.Context, in *QueryContractIsmRequest, opts ...grpc.CallOption) (*QueryContractIsmResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DefaultIsm(ctx context.Context, in *QueryDefaultIsmRequest, opts ...grpc.CallOption) (*QueryDefaultIsmResponse, error) {
	out := new(QueryDefaultIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.ism.v1.Query/DefaultIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractIsm(ctx context.Context, in *QueryContractIsmRequest, opts ...grpc.CallOption) (*QueryContractIsmResponse, error) {
	out := new(QueryContractIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.ism.v1.Query/ContractIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Get current default multisig ISM
	DefaultIsm(context.Context, *QueryDefaultIsmRequest) (*QueryDefaultIsmResponse, error)
	// Get contract's ISM
	ContractIsm(context.Context, *QueryContractIsmRequest) (*QueryContractIsmResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (*UnimplementedQueryServer) DefaultIsm(ctx context.Context, req *QueryDefaultIsmRequest) (*QueryDefaultIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultIsm not implemented")
}

func (*UnimplementedQueryServer) ContractIsm(ctx context.Context, req *QueryContractIsmRequest) (*QueryContractIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractIsm not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DefaultIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDefaultIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DefaultIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.ism.v1.Query/DefaultIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DefaultIsm(ctx, req.(*QueryDefaultIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.ism.v1.Query/ContractIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractIsm(ctx, req.(*QueryContractIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.ism.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefaultIsm",
			Handler:    _Query_DefaultIsm_Handler,
		},
		{
			MethodName: "ContractIsm",
			Handler:    _Query_ContractIsm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/ism/v1/query.proto",
}

func (m *QueryDefaultIsmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDefaultIsmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDefaultIsmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDefaultIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDefaultIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDefaultIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorPubKeys) > 0 {
		for iNdEx := len(m.ValidatorPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorPubKeys[iNdEx])
			copy(dAtA[i:], m.ValidatorPubKeys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractIsmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractIsmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractIsmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorPubKeys) > 0 {
		for iNdEx := len(m.ValidatorPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorPubKeys[iNdEx])
			copy(dAtA[i:], m.ValidatorPubKeys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *QueryDefaultIsmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDefaultIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorPubKeys) > 0 {
		for _, b := range m.ValidatorPubKeys {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovQuery(uint64(m.Threshold))
	}
	return n
}

func (m *QueryContractIsmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryContractIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorPubKeys) > 0 {
		for _, b := range m.ValidatorPubKeys {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovQuery(uint64(m.Threshold))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *QueryDefaultIsmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDefaultIsmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDefaultIsmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryDefaultIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDefaultIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDefaultIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubKeys = append(m.ValidatorPubKeys, make([]byte, postIndex-iNdEx))
			copy(m.ValidatorPubKeys[len(m.ValidatorPubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryContractIsmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractIsmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractIsmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = append(m.ContractAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAddr == nil {
				m.ContractAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryContractIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubKeys = append(m.ValidatorPubKeys, make([]byte, postIndex-iNdEx))
			copy(m.ValidatorPubKeys[len(m.ValidatorPubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
