// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/ism/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetDefaultIsm defines the request type for the SetDefaultIsm rpc.
type MsgSetDefaultIsm struct {
	Signer string        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Isms   []*DefaultIsm `protobuf:"bytes,2,rep,name=isms,proto3" json:"isms,omitempty"`
}

func (m *MsgSetDefaultIsm) Reset()         { *m = MsgSetDefaultIsm{} }
func (m *MsgSetDefaultIsm) String() string { return proto.CompactTextString(m) }
func (*MsgSetDefaultIsm) ProtoMessage()    {}
func (*MsgSetDefaultIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b013040feeda308, []int{0}
}

func (m *MsgSetDefaultIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetDefaultIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDefaultIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetDefaultIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDefaultIsm.Merge(m, src)
}

func (m *MsgSetDefaultIsm) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetDefaultIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDefaultIsm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDefaultIsm proto.InternalMessageInfo

// MsgSetDefaultIsmResponse defines the Msg/SetDefaultIsm response type
type MsgSetDefaultIsmResponse struct{}

func (m *MsgSetDefaultIsmResponse) Reset()         { *m = MsgSetDefaultIsmResponse{} }
func (m *MsgSetDefaultIsmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDefaultIsmResponse) ProtoMessage()    {}
func (*MsgSetDefaultIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b013040feeda308, []int{1}
}

func (m *MsgSetDefaultIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetDefaultIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDefaultIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetDefaultIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDefaultIsmResponse.Merge(m, src)
}

func (m *MsgSetDefaultIsmResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetDefaultIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDefaultIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDefaultIsmResponse proto.InternalMessageInfo

// MsgCreateIsm defines the request type to create a hyperlane ISM
type MsgCreateIsm struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Ism    *types.Any `protobuf:"bytes,2,opt,name=ism,proto3" json:"ism,omitempty"`
}

func (m *MsgCreateIsm) Reset()         { *m = MsgCreateIsm{} }
func (m *MsgCreateIsm) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIsm) ProtoMessage()    {}
func (*MsgCreateIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b013040feeda308, []int{2}
}

func (m *MsgCreateIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCreateIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCreateIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIsm.Merge(m, src)
}

func (m *MsgCreateIsm) XXX_Size() int {
	return m.Size()
}

func (m *MsgCreateIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIsm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIsm proto.InternalMessageInfo

// MsgCreateIsmResponse deines the MsgCreateIsm response type
type MsgCreateIsmResponse struct {
	// The unique ID assigned to the newly created ISM
	IsmId uint32 `protobuf:"varint,1,opt,name=ism_id,json=ismId,proto3" json:"ism_id,omitempty"`
}

func (m *MsgCreateIsmResponse) Reset()         { *m = MsgCreateIsmResponse{} }
func (m *MsgCreateIsmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIsmResponse) ProtoMessage()    {}
func (*MsgCreateIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b013040feeda308, []int{3}
}

func (m *MsgCreateIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCreateIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCreateIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIsmResponse.Merge(m, src)
}

func (m *MsgCreateIsmResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgCreateIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIsmResponse proto.InternalMessageInfo

func (m *MsgCreateIsmResponse) GetIsmId() uint32 {
	if m != nil {
		return m.IsmId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSetDefaultIsm)(nil), "hyperlane.ism.v1.MsgSetDefaultIsm")
	proto.RegisterType((*MsgSetDefaultIsmResponse)(nil), "hyperlane.ism.v1.MsgSetDefaultIsmResponse")
	proto.RegisterType((*MsgCreateIsm)(nil), "hyperlane.ism.v1.MsgCreateIsm")
	proto.RegisterType((*MsgCreateIsmResponse)(nil), "hyperlane.ism.v1.MsgCreateIsmResponse")
}

func init() { proto.RegisterFile("hyperlane/ism/v1/tx.proto", fileDescriptor_7b013040feeda308) }

var fileDescriptor_7b013040feeda308 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x3f, 0x6b, 0xdb, 0x40,
	0x18, 0xc6, 0x75, 0x71, 0x63, 0xc8, 0xa5, 0x81, 0x54, 0xb8, 0x54, 0x11, 0x45, 0x31, 0x1a, 0x82,
	0x31, 0x58, 0x97, 0xb8, 0xd0, 0x21, 0x74, 0x49, 0xda, 0x25, 0x83, 0x17, 0x19, 0x3a, 0x74, 0x31,
	0x72, 0xf4, 0xe6, 0x72, 0xe0, 0xbb, 0x33, 0x7a, 0xcf, 0x26, 0xde, 0x4a, 0xa7, 0xd2, 0xa9, 0x1f,
	0xa0, 0x43, 0x3e, 0x41, 0xf1, 0xd0, 0x4f, 0xd0, 0xa9, 0x63, 0xe8, 0xd4, 0xb1, 0xd8, 0x83, 0xfb,
	0x31, 0x8a, 0xfe, 0xd8, 0x4e, 0xec, 0xfe, 0x81, 0x2c, 0x42, 0xef, 0x3d, 0xcf, 0x7b, 0xf7, 0x7b,
	0x9f, 0x93, 0xe8, 0xde, 0xe5, 0xa8, 0x0f, 0x49, 0x2f, 0x52, 0xc0, 0x04, 0x4a, 0x36, 0x3c, 0x62,
	0xe6, 0x2a, 0xe8, 0x27, 0xda, 0x68, 0x7b, 0x77, 0x21, 0x05, 0x02, 0x65, 0x30, 0x3c, 0x72, 0x1f,
	0x45, 0x52, 0x28, 0xcd, 0xb2, 0x67, 0x6e, 0x72, 0x9f, 0x9c, 0x6b, 0x94, 0x1a, 0x99, 0x44, 0x9e,
	0x36, 0x4b, 0xe4, 0x85, 0xb0, 0x97, 0x0b, 0x9d, 0xac, 0x62, 0x79, 0x51, 0x48, 0x15, 0xae, 0xb9,
	0xce, 0xd7, 0xd3, 0xb7, 0x79, 0x03, 0xd7, 0x9a, 0xf7, 0x80, 0x65, 0x55, 0x77, 0x70, 0xc1, 0x22,
	0x35, 0x2a, 0x24, 0x77, 0x0d, 0x32, 0x05, 0xca, 0x34, 0xff, 0x33, 0xa1, 0xbb, 0x2d, 0xe4, 0x6d,
	0x30, 0xaf, 0xe0, 0x22, 0x1a, 0xf4, 0xcc, 0x19, 0x4a, 0xfb, 0x90, 0x96, 0x51, 0x70, 0x05, 0x89,
	0x43, 0xaa, 0xa4, 0xb6, 0x75, 0xea, 0x7c, 0xff, 0xd2, 0xa8, 0x14, 0x0c, 0x27, 0x71, 0x9c, 0x00,
	0x62, 0xdb, 0x24, 0x42, 0xf1, 0xb0, 0xf0, 0xd9, 0x87, 0xf4, 0x81, 0x40, 0x89, 0xce, 0x46, 0xb5,
	0x54, 0xdb, 0x6e, 0x3e, 0x0d, 0x56, 0x67, 0x0f, 0x96, 0xbb, 0x87, 0x99, 0xf3, 0xf8, 0xf9, 0xfb,
	0xeb, 0x7d, 0xeb, 0xd7, 0xf5, 0xbe, 0xf5, 0x6e, 0x36, 0xae, 0x97, 0x11, 0x54, 0x0c, 0xc9, 0x87,
	0xd9, 0xb8, 0xee, 0x2d, 0x5a, 0x1b, 0x29, 0xec, 0x2a, 0x9b, 0xef, 0x52, 0x67, 0x75, 0x2d, 0x04,
	0xec, 0x6b, 0x85, 0xe0, 0x7f, 0x22, 0xf4, 0x61, 0x0b, 0xf9, 0xcb, 0x04, 0x22, 0x03, 0xf7, 0x1b,
	0xe4, 0x80, 0x96, 0x04, 0x4a, 0x67, 0xa3, 0x4a, 0x6a, 0xdb, 0xcd, 0x4a, 0x90, 0x87, 0x1a, 0xcc,
	0x43, 0x0d, 0x4e, 0xd4, 0x28, 0x4c, 0x0d, 0xc7, 0xcd, 0xbf, 0xe0, 0xbb, 0x6b, 0xf8, 0x0b, 0x1a,
	0xbf, 0x41, 0x2b, 0xb7, 0xeb, 0x39, 0xb6, 0xfd, 0x98, 0x96, 0x05, 0xca, 0x8e, 0x88, 0x33, 0xca,
	0x9d, 0x70, 0x53, 0xa0, 0x3c, 0x8b, 0x9b, 0x5f, 0x09, 0x2d, 0xb5, 0x90, 0xdb, 0x6d, 0xba, 0xb5,
	0x9c, 0xc8, 0x5b, 0x8f, 0xf6, 0xf6, 0x9e, 0xee, 0xc1, 0xbf, 0xf5, 0xc5, 0x99, 0x1d, 0xba, 0x73,
	0xf7, 0xce, 0xfd, 0x3f, 0x36, 0xde, 0xf1, 0xb8, 0xf5, 0xff, 0x7b, 0xe6, 0x07, 0xb8, 0x9b, 0x6f,
	0x67, 0xe3, 0x3a, 0x39, 0x7d, 0xfd, 0x6d, 0xe2, 0x91, 0x9b, 0x89, 0x47, 0x7e, 0x4e, 0x3c, 0xf2,
	0x71, 0xea, 0x59, 0x37, 0x53, 0xcf, 0xfa, 0x31, 0xf5, 0xac, 0x37, 0x2f, 0xb8, 0x30, 0x97, 0x83,
	0x6e, 0x70, 0xae, 0x25, 0x43, 0x93, 0x44, 0x8a, 0x43, 0x4f, 0x0f, 0xa1, 0x31, 0x04, 0x65, 0x06,
	0x09, 0x20, 0x5b, 0x26, 0x59, 0xfc, 0x24, 0x57, 0xd9, 0xe7, 0x6b, 0x46, 0x7d, 0xc0, 0x6e, 0x39,
	0xbb, 0x92, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xd2, 0x86, 0xf8, 0x81, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create a custom ISM
	CreateIsm(ctx context.Context, in *MsgCreateIsm, opts ...grpc.CallOption) (*MsgCreateIsmResponse, error)
	// SetDefaultIsm defines a rpc handler method for MsgSetDefaultIsm.
	SetDefaultIsm(ctx context.Context, in *MsgSetDefaultIsm, opts ...grpc.CallOption) (*MsgSetDefaultIsmResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIsm(ctx context.Context, in *MsgCreateIsm, opts ...grpc.CallOption) (*MsgCreateIsmResponse, error) {
	out := new(MsgCreateIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.ism.v1.Msg/CreateIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDefaultIsm(ctx context.Context, in *MsgSetDefaultIsm, opts ...grpc.CallOption) (*MsgSetDefaultIsmResponse, error) {
	out := new(MsgSetDefaultIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.ism.v1.Msg/SetDefaultIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create a custom ISM
	CreateIsm(context.Context, *MsgCreateIsm) (*MsgCreateIsmResponse, error)
	// SetDefaultIsm defines a rpc handler method for MsgSetDefaultIsm.
	SetDefaultIsm(context.Context, *MsgSetDefaultIsm) (*MsgSetDefaultIsmResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct{}

func (*UnimplementedMsgServer) CreateIsm(ctx context.Context, req *MsgCreateIsm) (*MsgCreateIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsm not implemented")
}

func (*UnimplementedMsgServer) SetDefaultIsm(ctx context.Context, req *MsgSetDefaultIsm) (*MsgSetDefaultIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultIsm not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIsm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.ism.v1.Msg/CreateIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIsm(ctx, req.(*MsgCreateIsm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDefaultIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDefaultIsm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDefaultIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.ism.v1.Msg/SetDefaultIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDefaultIsm(ctx, req.(*MsgSetDefaultIsm))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.ism.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIsm",
			Handler:    _Msg_CreateIsm_Handler,
		},
		{
			MethodName: "SetDefaultIsm",
			Handler:    _Msg_SetDefaultIsm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/ism/v1/tx.proto",
}

func (m *MsgSetDefaultIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDefaultIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDefaultIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Isms) > 0 {
		for iNdEx := len(m.Isms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Isms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDefaultIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDefaultIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDefaultIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ism != nil {
		{
			size, err := m.Ism.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsmId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IsmId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgSetDefaultIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Isms) > 0 {
		for _, e := range m.Isms {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetDefaultIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Ism != nil {
		l = m.Ism.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsmId != 0 {
		n += 1 + sovTx(uint64(m.IsmId))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgSetDefaultIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDefaultIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDefaultIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isms = append(m.Isms, &DefaultIsm{})
			if err := m.Isms[len(m.Isms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetDefaultIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDefaultIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDefaultIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCreateIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ism", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ism == nil {
				m.Ism = &types.Any{}
			}
			if err := m.Ism.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCreateIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			m.IsmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsmId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
